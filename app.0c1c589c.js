(function(t){function e(e){for(var r,o,i=e[0],u=e[1],c=e[2],d=0,p=[];d<i.length;d++)o=i[d],a[o]&&p.push(a[o][0]),a[o]=0;for(r in u)Object.prototype.hasOwnProperty.call(u,r)&&(t[r]=u[r]);l&&l(e);while(p.length)p.shift()();return s.push.apply(s,c||[]),n()}function n(){for(var t,e=0;e<s.length;e++){for(var n=s[e],r=!0,i=1;i<n.length;i++){var u=n[i];0!==a[u]&&(r=!1)}r&&(s.splice(e--,1),t=o(o.s=n[0]))}return t}var r={},a={0:0},s=[];function o(e){if(r[e])return r[e].exports;var n=r[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=t,o.c=r,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"===typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)o.d(n,r,function(e){return t[e]}.bind(null,r));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t["default"]}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="";var i=window["webpackJsonp"]=window["webpackJsonp"]||[],u=i.push.bind(i);i.push=e,i=i.slice();for(var c=0;c<i.length;c++)e(i[c]);var l=u;s.push([1,1]),n()})({0:function(t,e){},"05q8":function(t,e){t.exports="You want to create an overview page that lists your blog posts chronologically.\n\nYou *could* do it the same way as we did with tags. However, you would need to update that page (create a new node), every time you add a new blog post. That sounds like a lot of waste: creating new nodes with only a small thing changed.\n\nThere’s a better way! Whenever you create a new blog post, you can link to the previous one directly. You can walk those links to create the overview page dynamically (which we’ll do in the next exercise).\n\nWe know the CID of a blog post as soon as it is stored in IPLD. We can use that CID to link from newer blog posts to older ones.\n"},"0h92":function(t,e,n){"use strict";var r=n("DAqK"),a=n.n(r);a.a},1:function(t,e,n){t.exports=n("Vtdi")},10:function(t,e){},11:function(t,e){},12:function(t,e){},13:function(t,e){},14:function(t,e){},15:function(t,e){},16:function(t,e){},17:function(t,e){},18:function(t,e){},19:function(t,e){},"1Opk":function(t,e){t.exports="You can read data from deeply nested objects using path queries.\n\n```javascript\nlet cid = await ipfs.dag.put({\n  my: {\n    deep: {\n      obj: 'is cool'\n    }\n  }\n})\n\nconsole.log(await ipfs.dag.get(cid, '/my/deep/obj'))\n/* prints {value: 'is cool', remainderPath: ''} */\n```\n\n`ipfs.dag.get()` allows queries using IPLD paths.\nThese queries return an object containing the value of the query and any remaining path that was unresolved.\n\nThe cool thing about this API is that it can also traverse through links.\n\n```javascript\nlet cid = await ipfs.dag.put({foo: 'bar'})\nlet cid2 = await ipfs.dag.put({\n  my: {\n    other: {'/': cid.toBaseEncodedString()}\n  }\n})\n\nconsole.log(await ipfs.dag.get(cid2, '/my/other/foo'))\n/* prints {value: 'bar', remainderPath: ''} */\n```\n"},"1Wsb":function(t,e){t.exports="Create a new blog post where the author of it is Sam, its content is about “dogs” and it is tagged as “funny” and “hobby”. Return the CID of that new blog post.\n"},"3zmY":function(t,e){t.exports="Everything that is stored in IPLD has an associated CID. That CID is constructed by hashing the data itself. If the same hash and encoding is used, then the same data will result in the same CID. This means that as soon as you edit data and store it, it will have a new CID. The old data won’t be overridden, it’s still there.\n\nBefore modifying the code, please open the developer tools and submit the code. You’ll see the CIDs of the blog posts on the console. When you look at the console again after you’ve modified the code, you’ll see the CIDs being different.\n\nAnother common thing in blogs is tagging. Let’s modify the blog posts again and add some tags.\n"},"4no2":function(t,e,n){},"53Z+":function(t,e){t.exports="With every blog post linked together, we can return all of with only the CID of the last.\n\nThe `prev` fields contains a link to the previous blog post. You can use that CID and the `ipfs.dag.get()` API to get the previous blog.\n\nNote: the `ipfs.dag.get()` API returns an object with a `value` attribute which is the node you want. Also, **links will be binary encoded**, so if you want them to be CID instances you'll need to use the `cid` module.\n\n```javascript\nlet cid = new CID((await ipfs.dag.get(someCid)).value.linkName['/'])\n```\n\nThis kind of traversal could be used to create an overview page that lists all blog posts.\n"},"5SJQ":function(t,e){t.exports="In the code below, introduce a new field named `prev` in our blog posts. This field links to the previous blog post.\n\nLink the blog posts in chronological order. The oldest one is the one about trees, then there’s the one about computers. The one about “dogs” is the newest one. Once you’ve updated them, return the CID of the blog post about “dogs”.\n"},"8hFW":function(t,e){t.exports="In order to make the DAG (Directed Acyclic Graph) a bit more interesting, we will add a new blog post. It follows the same structure as the existing ones.\n"},9:function(t,e){},"9fvg":function(t,e,n){t.exports=n.p+"img/ipfs-illustrations-how-3.334c34a9.svg"},"A0++":function(t,e,n){"use strict";var r=n("BPUQ"),a=n.n(r);a.a},BPUQ:function(t,e,n){},DAqK:function(t,e,n){},GHvf:function(t,e,n){t.exports=n.p+"img/ipld.726682d6.svg"},HTME:function(t,e){t.exports="The previously created blog post about dogs is completely disconnected from the others. Now, update the nodes that represent the tag cloud.\n"},NYqZ:function(t,e){t.exports="Modify the two existing blog posts and add a new field `author` that links to the author of the blog post. The post about trees was authored by Sam and Nat wrote the post about computers. Remember to use `toBaseEncodedString()` to make the CID links.\n"},"Oap/":function(t,e){t.exports="Insert those new tag objects into IPLD via `ipld.dag.put()` and return the two resulting CIDs as array.\n"},Tdbp:function(t,e,n){},Tgh9:function(t,e,n){t.exports=n.p+"img/ipfs-illustrations-how-4.374b2b50.svg"},Vtdi:function(t,e,n){"use strict";n.r(e);n("yt8O"),n("VRzm"),n("2hOx"),n("VoDl");var r=n("Kw5r"),a=n("jE9Z"),s=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{attrs:{id:"app"}},[n("router-view")],1)},o=[],i={name:"app"},u=i,c=(n("A0++"),n("KHd+")),l=Object(c["a"])(u,s,o,!1,null,null,null),d=l.exports,p=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"home"},[t._m(0),t._m(1),n("section",{staticClass:"db bt border-aqua bw4 relative"},[n("label",{staticClass:"absolute ttu f6 fw5 white",staticStyle:{top:"-15px",left:"91px"}},[t._v("\n      TOPICS\n    ")]),n("div",{staticClass:"flex items-start pv4"},[t._m(2),n("div",{staticClass:"w-100 w-50-ns measure-wide ph2 ph0-ns"},[n("h2",{staticClass:"ma0 f3 fw5"},[t._v("P2P data links with content addressing")]),n("p",{staticClass:"f5 fw5 ma0 pt2 lh-copy measure-wide charcoal-muted"},[t._v("\n          Store, fetch, and create verifiable links between peer-hosted datasets with IPLD and CIDs. It’s graphs with friends!\n        ")]),n("ul",{staticClass:"mv4 pa0 f5",staticStyle:{"list-style-type":"none",background:"rgba(11, 58, 82, 5%)"}},[n("li",[n("ExerciseLink",{attrs:{to:"/basics/01",index:"1",name:"Basic write."}})],1),n("li",[n("ExerciseLink",{attrs:{to:"/basics/02",index:"2",name:"Linking Data."}})],1),n("li",[n("ExerciseLink",{attrs:{to:"/basics/03",index:"3",name:"Reading data in links."}})],1)])]),t._m(3)])]),n("section",{staticClass:"db"},[n("div",{staticClass:"flex items-start pv4"},[t._m(4),n("div",{staticClass:"w-100 w-50-ns measure-wide ph2 ph0-ns"},[n("h2",{staticClass:"ma0 f3 fw5 "},[t._v("Blogging on the Permenant Web")]),n("p",{staticClass:"f5 fw5 ma0 pt2 lh-copy charcoal-muted"},[t._v("\n          Cool content addresses don't change\n        ")]),n("ul",{staticClass:"mv4 pa0 f5",staticStyle:{"list-style-type":"none",background:"rgba(11, 58, 82, 5%)"}},[n("li",[n("ExerciseLink",{attrs:{to:"/blog/01",index:"1",name:"Basic linking"}})],1),n("li",[n("ExerciseLink",{attrs:{to:"/blog/02",index:"2",name:"CIDs change"}})],1),n("li",[n("ExerciseLink",{attrs:{to:"/blog/03",index:"3",name:"Multiple links"}})],1),n("li",[n("ExerciseLink",{attrs:{to:"/blog/04",index:"4",name:"Bigger DAG"}})],1),n("li",[n("ExerciseLink",{attrs:{to:"/blog/05",index:"5",name:"Keep building links"}})],1),n("li",[n("ExerciseLink",{attrs:{to:"/blog/06",index:"6",name:"Chain of links"}})],1),n("li",[n("ExerciseLink",{attrs:{to:"/blog/07",index:"7",name:"Hop through nodes"}})],1)])]),t._m(5)])])])},f=[function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("header",{staticClass:"flex items-center bg-navy white pv3"},[r("div",{staticClass:"flex-none"},[r("div",{staticClass:"ph2 ph4-ns"},[r("img",{staticStyle:{height:"66px"},attrs:{src:n("cdGP"),alt:"IPFS"}})]),r("div",{staticClass:"header-text indent-1"},[r("h1",{staticClass:"ma0 pt4 ttu fw4"},[r("span",{staticClass:"green"},[t._v("Proto")]),r("span",{staticClass:"white"},[t._v("school")])]),r("h2",{staticClass:"ma0 fw5"},[t._v("\n          The interactive IPFS protocol workshop\n        ")])])]),r("div",{staticClass:"flex-auto tc"},[r("img",{staticStyle:{height:"124px"},attrs:{src:n("9fvg"),alt:""}})])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("section",{staticClass:"db bt border-aqua bw4"},[n("p",{staticClass:"f4 fw5 lh-copy ma0 pv4 indent-1 measure-wide"},[n("strong",[t._v("Protoschool is a collection of workshops")]),t._v(" that help you learn about the\n      IPFS protocol by writing code and solving challenges.\n    ")])])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"section-1 flex-none tc"},[r("h1",{staticClass:"ma0 f3 fw6 pb2"},[t._v("IPLD")]),r("img",{staticStyle:{height:"54px"},attrs:{src:n("GHvf"),alt:""}})])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"dn db-ns flex-auto tc"},[r("img",{attrs:{src:n("gTFZ"),alt:""}})])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"section-1 flex-none tc"},[r("h1",{staticClass:"ma0 f3 fw6 pb2"},[t._v("IPLD")]),r("img",{staticStyle:{height:"54px"},attrs:{src:n("GHvf"),alt:""}})])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"dn db-ns flex-auto tc"},[r("img",{attrs:{src:n("Tgh9"),alt:""}})])}],h=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("router-link",{staticClass:"link db pa3 bb b--white green hover-bg-washed-yellow",attrs:{to:t.to}},[n("span",{staticClass:"green ttu f6 pr3"},[t._v("Exercise "+t._s(t.index))]),n("span",{staticClass:"navy fw5"},[t._v(t._s(t.name))])])},g=[],b={name:"ExerciseLink",props:["to","index","name"]},v=b,m=Object(c["a"])(v,h,g,!1,null,null,null),x=m.exports,w={name:"home",components:{ExerciseLink:x}},y=w,C=(n("hTyn"),Object(c["a"])(y,p,f,!1,null,"eb4d2868",null)),k=C.exports,E=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-01"},[n("Lesson",{attrs:{text:t.text,validate:t.validate,exercise:t.exercise,concepts:t.concepts,lessonTitle:"Basic write."}})],1)},S=[],T=(n("ls82"),n("MECJ")),P=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[t._m(0),n("div",{staticClass:"flex-l items-start bt border-aqua bw4"},[n("section",{staticClass:"pv3 indent-1"},[n("h1",{staticClass:"f3 measure-wide"},[t._v(t._s(t.lessonTitle))]),n("div",{staticClass:"lesson-text lh-copy measure-wide",domProps:{innerHTML:t._s(t.parsedText)}})]),t.concepts?n("section",{staticClass:"dn db-ns ba border-green ph4 ml3 ml5-l mt5 mb3 mr3 measure",staticStyle:{background:"rgba(105, 196, 205, 10%)"}},[n("h2",{staticClass:"f5 fw2 green mt0 nb1 pt3"},[t._v("Useful concepts")]),n("div",{staticClass:"f6 lh-copy",domProps:{innerHTML:t._s(t.parsedConcepts)}})]):t._e()]),n("section",{staticClass:"indent-1 exercise pb4 pt3 ph3 ph4-l mb5 mr5 flex flex-column",class:{expand:t.expandExercise},staticStyle:{background:"#F6F7F9"}},[n("div",{staticClass:"flex-none"},[n("h2",{staticClass:"mt0 mb2 green fw4 fill-current"},[n("svg",{staticStyle:{"vertical-align":"-1px"},attrs:{viewBox:"0 0 12 12",width:"12",xmlns:"http://www.w3.org/2000/svg"}},[n("circle",{attrs:{cx:"6",cy:"6",r:"6"}})]),n("span",{staticClass:"green ttu f6 pl2 pr3"},[t._v("Exercise "+t._s(t.lessonNumber))]),n("span",{staticClass:"navy fw5 f5"},[t._v(t._s(t.lessonTitle))]),n("div",{staticClass:"fr"},[t.expandExercise?n("button",{staticClass:"b--transparent bg-transparent green hover-green-muted pointer focus-outline",attrs:{title:"go smol"},on:{click:t.toggleExpandExercise}},[n("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",fill:"currentColor",viewBox:"0 0 32 32"}},[n("path",{attrs:{d:"M16 4 L28 4 L28 16 L24 12 L20 16 L16 12 L20 8z M4 16 L8 20 L12 16 L16 20 L12 24 L16 28 L4 28z"}})])]):n("button",{staticClass:"b--transparent bg-transparent charcoal-muted hover-green pointer focus-outline",attrs:{title:"embiggen the exercise"},on:{click:t.toggleExpandExercise}},[n("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",fill:"currentColor",viewBox:"0 0 32 32"}},[n("path",{attrs:{d:"M16 4 L28 4 L28 16 L24 12 L20 16 L16 12 L20 8z M4 16 L8 20 L12 16 L16 20 L12 24 L16 28 L4 28z"}})])])])]),t.exercise?n("div",{staticClass:"lh-copy",domProps:{innerHTML:t._s(t.parsedExercise)}}):t._e()]),n("div",{staticClass:"bg-white flex-auto",staticStyle:{height:"100%"}},[n("MonacoEditor",{staticClass:"editor",attrs:{srcPath:".",height:t.editorHeight,options:t.options,code:t.code,theme:"vs",language:"javascript"},on:{mounted:t.onMounted,codeChange:t.onCodeChange}})],1),n("div",{staticClass:"flex-none"},[n("div",{staticClass:"pv2"},[t.output.test?n("div",t._b({},"div",t.output.test,!1),[t.output.test.error?n("div",{staticClass:"lh-copy pv2 ph3 bg-red white"},[t._v("\n            Error: "+t._s(t.output.test.error.message)+"\n          ")]):t._e(),t.output.test.fail?n("div",{staticClass:"lh-copy pv2 ph3 bg-red white"},[t._v("\n            "+t._s(t.output.test.fail)+"\n          ")]):t._e(),t.output.test.success?n("div",{staticClass:"lh-copy pv2 ph3 bg-green white"},[t._v("\n            "+t._s(t.output.test.success)+"\n            "),t.output.test.cid?n("a",{staticClass:"link fw7 underline-hover dib ph2 mh2 white",attrs:{target:"explore-ipld",href:t.exploreIpldUrl}},[t._v("\n              View in IPLD Explorer\n            ")]):t._e()]):t._e()]):n("div",{staticClass:"lh-copy pv2 ph3"},[t._v("\n          Update the code to complete the exercise. Click "),n("strong",[t._v("submit")]),t._v(" to check your answer.\n        ")])]),n("div",{staticClass:"pt3 ph2 tr"},[t.output.test&&t.output.test.success?n("div",[n("Button",{staticClass:"bg-aqua white",attrs:{click:t.next}},[t._v("Next")])],1):n("div",[n("Button",{staticClass:"bg-green white",attrs:{click:t.run}},[t._v("Submit")])],1)])])])])},L=[function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("header",{staticClass:"bg-navy pa3 flex items-center justify-around"},[r("a",{staticClass:"dn db-ns link flex-auto w-third-ns",attrs:{href:"/#/"}},[r("img",{staticClass:"ml3-ns",staticStyle:{height:"66px"},attrs:{src:n("cdGP"),alt:"IPFS"}})]),r("a",{staticClass:"link ma0 ttu f3 f1-ns fw4 w-third-ns tc",attrs:{href:"/#/"}},[r("span",{staticClass:"green"},[t._v("Proto")]),r("span",{staticClass:"white"},[t._v("school")])]),r("div",{staticClass:"w-third-ns tr dn db-ns"},[r("img",{staticStyle:{height:"50px"},attrs:{src:n("9fvg"),alt:""}})])])}],_=(n("9XZr"),n("a1Th"),n("KKXr"),n("f3/d"),n("LEOp"),n("26B4")),I=n.n(_),D=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"explorer"},[n("iframe",{attrs:{src:t.src}})])},B=[],A={data:function(t){var e=t.$attrs.cid;e=e.toBaseEncodedString?e.toBaseEncodedString():e;var n="https://ipfs.io/ipfs/QmeznoNAoUcQdCFEEz4ktv4zLfYYyhVNin28Frsv8LLxCb/?embed=true#/explore/".concat(e);return{src:n}}},j=A,O=(n("0h92"),Object(c["a"])(j,D,B,!1,null,"d9fc3ea4",null)),R=O.exports,F=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("button",{staticClass:"avenir dib v-mid fw7 nowrap lh-copy bn br1 pv2 ph3 pointer focus-outline",on:{click:t.click}},[t._t("default",[t._v("Submit")])],2)},q=[],N={props:{click:{type:Function,required:!0}}},Y=N,z=(n("agfV"),Object(c["a"])(Y,F,q,!1,null,"6f2f165f",null)),V=z.exports,$=n("zeWQ"),M=n("xElV"),G=n("DlQD"),J=n("pw5m");J.registerLanguage("js",n("TdF3")),J.registerLanguage("javascript",n("TdF3")),J.registerLanguage("json",n("WtIr")),G.setOptions({highlight:function(t){return J.highlightAuto(t).value}});var U,K=function(){var t=Object(T["a"])(regeneratorRuntime.mark(function t(e,n){var r,a,s,o,i=arguments;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:return r=i.length>2&&void 0!==i[2]?i[2]:{},t.next=3,new Promise(function(t){return n.on("ready",t)});case 3:t.prev=3,a=new Function("ipfs","require",e),t.next=11;break;case 7:return t.prev=7,t.t0=t["catch"](3),s={error:t.t0},t.abrupt("return",s);case 11:return o=function(t){if(!r[t])throw new Error("Cannot find modules: ".concat(t));return r[t]},t.prev=12,t.next=15,a(n,o)();case 15:s=t.sent,t.next=21;break;case 18:t.prev=18,t.t1=t["catch"](12),s={error:t.t1};case 21:return t.abrupt("return",s);case 22:case"end":return t.stop()}},t,this,[[3,7],[12,18]])}));return function(e,n){return t.apply(this,arguments)}}(),W="/* globals ipfs */\n\nconst run = async () => {\n  // your code goes here!\n  // example: ipfs.dag.put({hello: 'world'})\n}\n\nreturn run\n\n",Z={},Q={components:{MonacoEditor:I.a,Explorer:R,Button:V},data:function(t){return{text:t.$attrs.text,exercise:t.$attrs.exercise,concepts:t.$attrs.concepts,code:t.$attrs.code||W,parsedText:G(t.$attrs.text),parsedExercise:G(t.$attrs.exercise||""),parsedConcepts:G(t.$attrs.concepts||""),lessonTitle:t.$attrs.lessonTitle,output:Z,IPFS:$,expandExercise:!1,options:{selectOnLineNumbers:!1,lineNumbersMinChars:3,scrollBeyondLastLine:!1,automaticLayout:!0}}},computed:{exploreIpldUrl:function(){var t=this.output.test&&this.output.test.cid&&this.output.test.cid.toBaseEncodedString();return t=t||"","https://ipfs.io/ipfs/QmYJETQ15RAnKXoJxqpXzcvQ2DuQA35UHwJBTjTPCSs9Ky/#/explore/".concat(t)},lessonNumber:function(){return this.$route.path.slice(this.$route.path.lastIndexOf("/")+1)},editorHeight:function(){if(!this.expandExercise){var t=18,e=Math.min(Math.max(this.code.split("\n").length,12),25),n=e*t;return n}}},methods:{run:function(){var t=Object(T["a"])(regeneratorRuntime.mark(function t(){var e,n,a,s,o;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:return U&&(U.stop(),U=null),e=this.createIPFS(),n=this.editor.getValue(),a={},this.$attrs.modules&&(a=this.$attrs.modules),t.next=7,K(n,e,a);case 7:if(s=t.sent,!s||!s.error){t.next=11;break}return r["a"].set(Z,"test",s),t.abrupt("return");case 11:return t.next=13,this.$attrs.validate(s,e);case 13:o=t.sent,r["a"].set(Z,"test",o),M.isCID(s)?(U=e,r["a"].set(Z.test,"cid",s)):e.stop();case 16:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}(),createIPFS:function(){return this.$attrs.createIPFS?this.$attrs.createIPFS():new $({repo:Math.random().toString()})},onMounted:function(t){this.editor=t},onCodeChange:function(t){},next:function(){r["a"].set(Z,"test",null),console.log(this.$route);var t=this.lessonNumber,e=(parseInt(t)+1).toString().padStart(2,"0");console.log(t,e),this.$router.push({path:e})},toggleExpandExercise:function(){this.expandExercise=!this.expandExercise}}},H=Q,X=(n("YZgz"),Object(c["a"])(H,P,L,!1,null,"a74329e6",null)),tt=X.exports,et=n("Z/+g"),nt=n.n(et),rt=n("xbtC"),at=n.n(rt),st=n("xElV"),ot=function(){var t=Object(T["a"])(regeneratorRuntime.mark(function t(e,n){var r,a,s,o,i;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if(st.isCID(e)){t.next=4;break}return t.abrupt("return",{fail:"Did not return a valid CID instance."});case 4:if(r="zdpuApm55Qv2zRxb3KKjVUxhQSw2r4a7jeiDV7163yCQnfivy",e.toBaseEncodedString()!==r){t.next=9;break}return t.abrupt("return",{success:"All works!"});case 9:return t.next=11,n.dag.get(e);case 11:return a=t.sent,s=JSON.stringify({test:1}),o=JSON.stringify(a.value),i='Was expecting "'.concat(s,'" but got "').concat(o,'"'),t.abrupt("return",{fail:i});case 16:case"end":return t.stop()}},t,this)}));return function(e,n){return t.apply(this,arguments)}}(),it={components:{Lesson:tt},data:function(){return{text:nt.a,validate:ot,exercise:at.a}}},ut=it,ct=Object(c["a"])(ut,E,S,!1,null,null,null),lt=ct.exports,dt=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-02"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,modules:t.modules,exercise:t.exercise,concepts:t.concepts,lessonTitle:"Linking Data"}})],1)},pt=[],ft=n("l5wf"),ht=n.n(ft),gt=n("m9oR"),bt=n.n(gt),vt=n("w1U7"),mt=n.n(vt),xt=n("xElV"),wt="/* globals ipfs */\n\nconst run = async () => {\n  let cid = await ipfs.dag.put({test: 1})\n  // your code goes here\n}\n\nreturn run\n",yt=function(){var t=Object(T["a"])(regeneratorRuntime.mark(function t(e,n){var r,a,s,o,i;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if(xt.isCID(e)){t.next=4;break}return t.abrupt("return",{fail:"Did not return a valid CID instance."});case 4:if(r="zdpuAoPanArLvuFtuvmLYuSvp8zE8wuKSMZUkMN8Y1PaHLvKP",e.toBaseEncodedString()!==r){t.next=9;break}return t.abrupt("return",{success:"All works!"});case 9:return t.next=11,n.dag.get(e);case 11:return a=t.sent,s=JSON.stringify({bar:{"/":r}}),o=JSON.stringify(a.value),i='Was expecting "'.concat(s,'" but got "').concat(o,'"'),t.abrupt("return",{fail:i});case 16:case"end":return t.stop()}},t,this)}));return function(e,n){return t.apply(this,arguments)}}(),Ct={cids:n("xElV")},kt={components:{Lesson:tt},data:function(){return{code:wt,text:ht.a,validate:yt,modules:Ct,exercise:mt.a,concepts:bt.a}}},Et=kt,St=Object(c["a"])(Et,dt,pt,!1,null,null,null),Tt=St.exports,Pt=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-03"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,modules:t.modules,exercise:t.exercise,lessonTitle:"Reading data in links."}})],1)},Lt=[],_t=n("1Opk"),It=n.n(_t),Dt=n("yrFN"),Bt=n.n(Dt),At="/* globals ipfs */\n\nconst run = async () => {\n  let cid = await ipfs.dag.put({test: 1})\n  let cid2 = await ipfs.dag.put(\n    {bar: {'/': cid.toBaseEncodedString()}}\n  )\n  /* your code goes here */\n}\n\nreturn run\n",jt=function(){var t=Object(T["a"])(regeneratorRuntime.mark(function t(e,n){var r,a,s;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if(1!==e){t.next=4;break}return t.abrupt("return",{success:"Great job, got 1."});case 4:if(1!==e.value||""!==e.remainderPath){t.next=8;break}return t.abrupt("return",{success:"Great job!"});case 8:return r=JSON.stringify({value:1,remainderPath:""}),a=JSON.stringify(e),s='Was expecting "'.concat(r,'" but got "').concat(a,'".'),t.abrupt("return",{fail:s});case 12:case"end":return t.stop()}},t,this)}));return function(e,n){return t.apply(this,arguments)}}(),Ot={cids:n("xElV")},Rt={components:{Lesson:tt},data:function(){return{code:At,text:It.a,validate:jt,modules:Ot,exercise:Bt.a}}},Ft=Rt,qt=Object(c["a"])(Ft,Pt,Lt,!1,null,null,null),Nt=qt.exports,Yt=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-blog-01"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,exercise:t.exercise,lessonTitle:"Basic linking"}})],1)},zt=[],Vt=(n("Z2Ku"),n("L9s1"),n("rE2o"),n("ioFf"),n("rGqo"),n("Vd3H"),n("oQ5H")),$t=n.n(Vt),Mt=n("NYqZ"),Gt=n.n(Mt),Jt=(n("pIFo"),n("xElV")),Ut=function(t){return JSON.stringify(t,null," ").replace("\n","")},Kt=function(t,e){if(!Array.isArray(t)||t.length!==e)return{fail:"You need to return an array of ".concat(e," CIDs")};var n=t.every(Jt.isCID);return n?{success:""}:{fail:"Array elements need to be CIDs"}},Wt={stringify:Ut,validateArrayOfCids:Kt},Zt=n("wrOu"),Qt=n("xElV"),Ht='/* globals ipfs */\n\nconst run = async () => {\n  const natCid = await ipfs.dag.put({author: "Nat"})\n  const samCid = await ipfs.dag.put({author: "Sam"})\n\n  // Modify the blog posts below\n\n  const treePostCid = await ipfs.dag.put({content: "trees"})\n  const computerPostCid = await ipfs.dag.put({content: "computers"})\n\n  return [treePostCid, computerPostCid]\n}\n\nreturn run\n',Xt=function(){var t=Object(T["a"])(regeneratorRuntime.mark(function t(e,n){var r,a,s,o,i,u,c,l,d,p,f,h,g,b,v;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if(r=Wt.validateArrayOfCids(e,2),!r.fail){t.next=5;break}return t.abrupt("return",r);case 5:a="zdpuAyB57Xn8fuPvM8Gam5ycJTz6bgzLqtQBihyFuh5T7a6SK",s="zdpuAzUoWGnKe4p13YbexQrb5AMhnDWDCqJt2XyqVPU6DxS4m",o=!0,i=!1,u=void 0,t.prev=10,c=e[Symbol.iterator]();case 12:if(o=(l=c.next()).done){t.next=38;break}return d=l.value,t.next=16,n.dag.get(d);case 16:if(p=t.sent,f=p.value,void 0!==f.author){t.next=20;break}return t.abrupt("return",{fail:"Blog posts need to have an `author` field."});case 20:if(void 0!==f.author["/"]){t.next=22;break}return t.abrupt("return",{fail:'The value of `author` needs to be a link (`{"/": "some-cid"}`).'});case 22:if(h=new Qt(f.author["/"]).toBaseEncodedString(),[a,s].includes(h)){t.next=25;break}return t.abrupt("return",{fail:"You need to link to the CID of an author (Nat or Sam)."});case 25:g=void 0,t.t0=f.content,t.next="trees"===t.t0?29:"computers"===t.t0?31:33;break;case 29:return g=s,t.abrupt("break",33);case 31:return g=a,t.abrupt("break",33);case 33:if(h===g){t.next=35;break}return t.abrupt("return",{fail:'The author of the "'.concat(f.content,'" blog post (').concat(h,") did not match the the expected author (").concat(g,").")});case 35:o=!0,t.next=12;break;case 38:t.next=44;break;case 40:t.prev=40,t.t1=t["catch"](10),i=!0,u=t.t1;case 44:t.prev=44,t.prev=45,o||null==c.return||c.return();case 47:if(t.prev=47,!i){t.next=50;break}throw u;case 50:return t.finish(47);case 51:return t.finish(44);case 52:if(b=["zdpuAkSPEnmgR1rqKkzpFN5qfJshCQKqMaVtUSpQJAMLdw3KF","zdpuAxzw762rP3CXZpAsKagPFR2AyqmZU2sN8U1GuVCeoYUEo"],v=e.map(function(t){return t.toBaseEncodedString()}),!Zt(v.sort(),b.sort())){t.next=58;break}return t.abrupt("return",{success:"All works!"});case 58:return t.abrupt("return",{fail:"The returned CIDs ".concat(Wt.stringify(v)," did not match the expected CIDs ").concat(Wt.stringify(b),".")});case 59:case"end":return t.stop()}},t,this,[[10,40,44,52],[45,,47,51]])}));return function(e,n){return t.apply(this,arguments)}}(),te={components:{Lesson:tt},data:function(){return{code:Ht,text:$t.a,validate:Xt,exercise:Gt.a}}},ee=te,ne=Object(c["a"])(ee,Yt,zt,!1,null,null,null),re=ne.exports,ae=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-blog-02"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,exercise:t.exercise,lessonTitle:"CIDs change"}})],1)},se=[],oe=n("3zmY"),ie=n.n(oe),ue=n("fRSX"),ce=n.n(ue),le=n("wrOu"),de='/* globals ipfs */\n\nconst run = async () => {\n  const natCid = await ipfs.dag.put({author: "Nat"})\n  const samCid = await ipfs.dag.put({author: "Sam"})\n\n  // Modify the blog posts below\n\n  const treePostCid = await ipfs.dag.put({\n    content: "trees",\n    author: {"/": samCid.toBaseEncodedString()}\n  })\n  const computerPostCid = await ipfs.dag.put({\n    content: "computers",\n    author: {"/": natCid.toBaseEncodedString()}\n  })\n\n  console.log(\'post about trees:\', treePostCid.toBaseEncodedString())\n  console.log(\'post about computers:\', computerPostCid.toBaseEncodedString())\n\n  return [treePostCid, computerPostCid]\n}\n\nreturn run',pe=function(){var t=Object(T["a"])(regeneratorRuntime.mark(function t(e,n){var r,a,s,o,i,u,c,l,d,p,f;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if(r=Wt.validateArrayOfCids(e,2),!r.fail){t.next=5;break}return t.abrupt("return",r);case 5:a=!0,s=!1,o=void 0,t.prev=8,i=e[Symbol.iterator]();case 10:if(a=(u=i.next()).done){t.next=36;break}return c=u.value,t.next=14,n.dag.get(c);case 14:if(l=t.sent,d=l.value,void 0!==d.tags){t.next=18;break}return t.abrupt("return",{fail:"Blog posts need to have a `tags` field."});case 18:if(Array.isArray(d.tags)){t.next=20;break}return t.abrupt("return",{fail:"The value of the `tags` field must be an array of strings."});case 20:if(p=d.tags.every(function(t){return"string"===typeof t}),p){t.next=23;break}return t.abrupt("return",{fail:"Tags need to be strings."});case 23:f=void 0,t.t0=d.content,t.next="trees"===t.t0?27:"computers"===t.t0?29:31;break;case 27:return f=["hobby","outdoor"],t.abrupt("break",31);case 29:return f=["hobby"],t.abrupt("break",31);case 31:if(le(d.tags.sort(),f.sort())){t.next=33;break}return t.abrupt("return",{fail:'The tags of the "'.concat(d.content,'" blog post ').concat(Wt.stringify(d.tags)," did not match the the expected tags ").concat(Wt.stringify(f),".")});case 33:a=!0,t.next=10;break;case 36:t.next=42;break;case 38:t.prev=38,t.t1=t["catch"](8),s=!0,o=t.t1;case 42:t.prev=42,t.prev=43,a||null==i.return||i.return();case 45:if(t.prev=45,!s){t.next=48;break}throw o;case 48:return t.finish(45);case 49:return t.finish(42);case 50:return t.abrupt("return",{success:"All works!"});case 51:case"end":return t.stop()}},t,this,[[8,38,42,50],[43,,45,49]])}));return function(e,n){return t.apply(this,arguments)}}(),fe={components:{Lesson:tt},data:function(){return{code:de,text:ie.a,validate:pe,exercise:ce.a}}},he=fe,ge=Object(c["a"])(he,ae,se,!1,null,null,null),be=ge.exports,ve=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-blog-03"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,exercise:t.exercise,lessonTitle:"Multiple links"}})],1)},me=[],xe=n("nuG5"),we=n.n(xe),ye=n("Oap/"),Ce=n.n(ye),ke=n("wrOu"),Ee=n("xElV"),Se='/* globals ipfs */\n\nconst run = async () => {\n  const natCid = await ipfs.dag.put({author: "Nat"})\n  const samCid = await ipfs.dag.put({author: "Sam"})\n  const treePostCid = await ipfs.dag.put({\n    content: "trees",\n    author: {"/": samCid.toBaseEncodedString()},\n    tags: ["outdoor", "hobby"]\n  })\n  const computerPostCid = await ipfs.dag.put({\n    content: "computers",\n    author: {"/": natCid.toBaseEncodedString()},\n    tags: ["hobby"]\n  })\n\n  // Add your code here\n}\n\nreturn run',Te=function(){var t=Object(T["a"])(regeneratorRuntime.mark(function t(e,n){var r,a,s,o,i,u,c,l,d,p,f,h,g,b;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if(r=Wt.validateArrayOfCids(e,2),!r.fail){t.next=5;break}return t.abrupt("return",r);case 5:a=!0,s=!1,o=void 0,t.prev=8,i=e[Symbol.iterator]();case 10:if(a=(u=i.next()).done){t.next=44;break}return c=u.value,t.next=14,n.dag.get(c);case 14:if(l=t.sent,d=l.value,void 0!==d.tag){t.next=18;break}return t.abrupt("return",{fail:"Tag nodes need to have a `tag` field."});case 18:if("string"===typeof d.tag){t.next=20;break}return t.abrupt("return",{fail:"`tag` field needs to be a string."});case 20:if(void 0!==d.posts){t.next=22;break}return t.abrupt("return",{fail:"Tag nodes need to have a `posts` field."});case 22:if(Array.isArray(d.posts)){t.next=24;break}return t.abrupt("return",{fail:"The value of the `posts` field must be an array of links."});case 24:if(p=d.posts.every(function(t){return"/"in t}),p){t.next=27;break}return t.abrupt("return",{fail:"The values of the `posts` array must be links."});case 27:f="zdpuAri55PR9iW239ahcbnfkFU2TVyD5iLmqEFmwY634KZAJV",h="zdpuAqaHPSosSZFRPe7u5q3yNqgg4JuvrLaUJxGamNPLhWivX",g=void 0,t.t0=d.tag,t.next="hobby"===t.t0?33:"outdoor"===t.t0?35:37;break;case 33:return g=[f,h],t.abrupt("break",38);case 35:return g=[f],t.abrupt("break",38);case 37:return t.abrupt("return",{fail:"Wrong tag (".concat(d.tag,'). Did you mean "hobby" or "outdoor"?')});case 38:if(b=d.posts.map(function(t){return new Ee(t["/"]).toBaseEncodedString()}),ke(b.sort(),g.sort())){t.next=41;break}return t.abrupt("return",{fail:'The posts of the tag "'.concat(d.tag,'" ').concat(Wt.stringify(b)," did not match the the expected posts ").concat(Wt.stringify(g),".")});case 41:a=!0,t.next=10;break;case 44:t.next=50;break;case 46:t.prev=46,t.t1=t["catch"](8),s=!0,o=t.t1;case 50:t.prev=50,t.prev=51,a||null==i.return||i.return();case 53:if(t.prev=53,!s){t.next=56;break}throw o;case 56:return t.finish(53);case 57:return t.finish(50);case 58:return t.abrupt("return",{success:"All works!"});case 59:case"end":return t.stop()}},t,this,[[8,46,50,58],[51,,53,57]])}));return function(e,n){return t.apply(this,arguments)}}(),Pe={components:{Lesson:tt},data:function(){return{code:Se,text:we.a,validate:Te,exercise:Ce.a}}},Le=Pe,_e=Object(c["a"])(Le,ve,me,!1,null,null,null),Ie=_e.exports,De=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-blog-04"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,exercise:t.exercise,lessonTitle:"Bigger DAG"}})],1)},Be=[],Ae=n("8hFW"),je=n.n(Ae),Oe=n("1Wsb"),Re=n.n(Oe),Fe=n("wrOu"),qe=n("xElV"),Ne='/* globals ipfs */\n\nconst run = async () => {\n  const natCid = await ipfs.dag.put({author: "Nat"})\n  const samCid = await ipfs.dag.put({author: "Sam"})\n  const treePostCid = await ipfs.dag.put({\n    content: "trees",\n    author: {"/": samCid.toBaseEncodedString()},\n    tags: ["outdoor", "hobby"]\n  })\n  const computerPostCid = await ipfs.dag.put({\n    content: "computers",\n    author: {"/": natCid.toBaseEncodedString()},\n    tags: ["hobby"]\n  })\n\n  // Add your code here\n\n  const outdoorTagCid = await ipfs.dag.put({\n    tag: "outdoor",\n    posts: [\n      {"/": treePostCid.toBaseEncodedString()}\n    ]\n  })\n  const hobbyTagCid = await ipfs.dag.put({\n    tag: "hobby",\n    posts: [\n      {"/": treePostCid.toBaseEncodedString()},\n      {"/": computerPostCid.toBaseEncodedString()}\n    ]\n  })\n}\n\nreturn run',Ye=function(){var t=Object(T["a"])(regeneratorRuntime.mark(function t(e,n){var r,a,s,o,i;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if(qe.isCID(e)){t.next=4;break}return t.abrupt("return",{fail:"Did not return a valid CID instance."});case 4:return t.next=6,n.dag.get(e);case 6:if(r=t.sent.value,void 0!==r.content){t.next=9;break}return t.abrupt("return",{fail:"Blog post needs to have a `content` field."});case 9:if("dogs"===r.content){t.next=11;break}return t.abrupt("return",{fail:'The `content` of the new blog post must be "dogs".'});case 11:if(void 0!==r.author){t.next=13;break}return t.abrupt("return",{fail:"Blog post needs to have an `author` field."});case 13:if(void 0!==r.author["/"]){t.next=15;break}return t.abrupt("return",{fail:'The value of `author` needs to be a link (`{"/": "some-cid"}`).'});case 15:if(a="zdpuAzUoWGnKe4p13YbexQrb5AMhnDWDCqJt2XyqVPU6DxS4m",s=new qe(r.author["/"]).toBaseEncodedString(),s===a){t.next=19;break}return t.abrupt("return",{fail:"The author of the new blog post needs to be Sam."});case 19:if(void 0!==r.tags){t.next=21;break}return t.abrupt("return",{fail:"Blog post needs to have a `tags` field."});case 21:if(Array.isArray(r.tags)){t.next=23;break}return t.abrupt("return",{fail:"The value of the `tags` field must be an array of strings."});case 23:if(o=r.tags.every(function(t){return"string"===typeof t}),o){t.next=26;break}return t.abrupt("return",{fail:"Tags need to be strings."});case 26:if(i=["funny","hobby"],Fe(r.tags.sort(),i.sort())){t.next=29;break}return t.abrupt("return",{fail:'The tags of the "'.concat(r.content,'" blog post ').concat(Wt.stringify(r.tags)," did not match the the expected tags ").concat(Wt.stringify(i),".")});case 29:return t.abrupt("return",{success:"All works!"});case 30:case"end":return t.stop()}},t,this)}));return function(e,n){return t.apply(this,arguments)}}(),ze={components:{Lesson:tt},data:function(){return{code:Ne,text:je.a,validate:Ye,exercise:Re.a}}},Ve=ze,$e=Object(c["a"])(Ve,De,Be,!1,null,null,null),Me=$e.exports,Ge=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-blog-05"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,exercise:t.exercise,lessonTitle:"Keep building links"}})],1)},Je=[],Ue=n("HTME"),Ke=n.n(Ue),We=n("gdnd"),Ze=n.n(We),Qe=n("wrOu"),He=n("xElV"),Xe='/* globals ipfs */\n\nconst run = async () => {\n  const natCid = await ipfs.dag.put({author: "Nat"})\n  const samCid = await ipfs.dag.put({author: "Sam"})\n  const treePostCid = await ipfs.dag.put({\n    content: "trees",\n    author: {"/": samCid.toBaseEncodedString()},\n    tags: ["outdoor", "hobby"]\n  })\n  const computerPostCid = await ipfs.dag.put({\n    content: "computers",\n    author: {"/": natCid.toBaseEncodedString()},\n    tags: ["hobby"]\n  })\n  const dogPostCid = await ipfs.dag.put({\n    content: "dogs",\n    author: {"/": samCid.toBaseEncodedString()},\n    tags: ["funny", "hobby"]\n  })\n\n  const outdoorTagCid = await ipfs.dag.put({\n    tag: "outdoor",\n    posts: [\n      {"/": treePostCid.toBaseEncodedString()}\n    ]\n  })\n  const hobbyTagCid = await ipfs.dag.put({\n    tag: "hobby",\n    posts: [\n      {"/": treePostCid.toBaseEncodedString()},\n      {"/": computerPostCid.toBaseEncodedString()}\n    ]\n  })\n\n  // Add your new code here and modify the tags above\n}\n\nreturn run',tn=function(){var t=Object(T["a"])(regeneratorRuntime.mark(function t(e,n){var r,a,s,o,i,u,c,l,d,p,f,h,g,b,v;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if(r=Wt.validateArrayOfCids(e,3),!r.fail){t.next=5;break}return t.abrupt("return",r);case 5:a=!0,s=!1,o=void 0,t.prev=8,i=e[Symbol.iterator]();case 10:if(a=(u=i.next()).done){t.next=47;break}return c=u.value,t.next=14,n.dag.get(c);case 14:if(l=t.sent,d=l.value,void 0!==d.tag){t.next=18;break}return t.abrupt("return",{fail:"Tag nodes need to have a `tag` field."});case 18:if("string"===typeof d.tag){t.next=20;break}return t.abrupt("return",{fail:"`tag` field needs to be a string."});case 20:if(void 0!==d.posts){t.next=22;break}return t.abrupt("return",{fail:"Tag nodes need to have a `posts` field."});case 22:if(Array.isArray(d.posts)){t.next=24;break}return t.abrupt("return",{fail:"The value of the `posts` field must be an array of links."});case 24:if(p=d.posts.every(function(t){return"/"in t}),p){t.next=27;break}return t.abrupt("return",{fail:"The values of the `posts` array must be links."});case 27:f=void 0,h="zdpuAri55PR9iW239ahcbnfkFU2TVyD5iLmqEFmwY634KZAJV",g="zdpuAqaHPSosSZFRPe7u5q3yNqgg4JuvrLaUJxGamNPLhWivX",b="zdpuAuaznfNPWfgSSrcGxkm3yqyssY6mz8i5T2gxqpEpNExG6",t.t0=d.tag,t.next="funny"===t.t0?34:"hobby"===t.t0?36:"outdoor"===t.t0?38:40;break;case 34:return f=[b],t.abrupt("break",41);case 36:return f=[h,g,b],t.abrupt("break",41);case 38:return f=[h],t.abrupt("break",41);case 40:return t.abrupt("return",{fail:"Wrong tag (".concat(d.tag,"). Did you mean one of funny, hobby, outdoor?")});case 41:if(v=d.posts.map(function(t){return new He(t["/"]).toBaseEncodedString()}),Qe(v.sort(),f.sort())){t.next=44;break}return t.abrupt("return",{fail:'The posts of the tag "'.concat(d.tag,'" ').concat(Wt.stringify(v)," did not match the the expected posts ").concat(Wt.stringify(f),".")});case 44:a=!0,t.next=10;break;case 47:t.next=53;break;case 49:t.prev=49,t.t1=t["catch"](8),s=!0,o=t.t1;case 53:t.prev=53,t.prev=54,a||null==i.return||i.return();case 56:if(t.prev=56,!s){t.next=59;break}throw o;case 59:return t.finish(56);case 60:return t.finish(53);case 61:return t.abrupt("return",{success:"All works!"});case 62:case"end":return t.stop()}},t,this,[[8,49,53,61],[54,,56,60]])}));return function(e,n){return t.apply(this,arguments)}}(),en={components:{Lesson:tt},data:function(){return{code:Xe,text:Ke.a,validate:tn,exercise:Ze.a}}},nn=en,rn=Object(c["a"])(nn,Ge,Je,!1,null,null,null),an=rn.exports,sn=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-blog-06"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,exercise:t.exercise,lessonTitle:"Chain of links"}})],1)},on=[],un=n("05q8"),cn=n.n(un),ln=n("5SJQ"),dn=n.n(ln),pn=n("xElV"),fn='/* globals ipfs */\n\nconst run = async () => {\n  const natCid = await ipfs.dag.put({author: "Nat"})\n  const samCid = await ipfs.dag.put({author: "Sam"})\n\n  // Modify the blog posts below\n\n  const treePostCid = await ipfs.dag.put({\n    content: "trees",\n    author: {"/": samCid.toBaseEncodedString()},\n    tags: ["outdoor", "hobby"]\n  })\n  const computerPostCid = await ipfs.dag.put({\n    content: "computers",\n    author: {"/": natCid.toBaseEncodedString()},\n    tags: ["hobby"]\n  })\n  const dogPostCid = await ipfs.dag.put({\n    content: "dogs",\n    author: {"/": samCid.toBaseEncodedString()},\n    tags: ["funny", "hobby"]\n  })\n\n  const outdoorTagCid = await ipfs.dag.put({\n    tag: "outdoor",\n    posts: [\n      {"/": treePostCid.toBaseEncodedString()}\n    ]\n  })\n  const hobbyTagCid = await ipfs.dag.put({\n    tag: "hobby",\n    posts: [\n      {"/": treePostCid.toBaseEncodedString()},\n      {"/": computerPostCid.toBaseEncodedString()},\n      {"/": dogPostCid.toBaseEncodedString()}\n    ]\n  })\n  const funnyTagCid = await ipfs.dag.put({\n    tag: "funny",\n    posts: [\n      {"/": dogPostCid.toBaseEncodedString()}\n    ]\n  })\n\n  return dogPostCid\n}\n\nreturn run',hn=function(){var t=Object(T["a"])(regeneratorRuntime.mark(function t(e,n){var r,a,s,o,i,u,c,l,d,p,f;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if(pn.isCID(e)){t.next=4;break}return t.abrupt("return",{fail:"Did not return a valid CID instance."});case 4:return t.next=6,n.dag.get(e);case 6:if(r=t.sent.value,void 0!==r.content&&"dogs"===r.content){t.next=9;break}return t.abrupt("return",{fail:'The returned value should be the CID of the "dogs" blog post.'});case 9:if(void 0!==r.prev){t.next=11;break}return t.abrupt("return",{fail:'The "dogs" blog post needs to have a `prev` field.'});case 11:if(void 0!==r.prev["/"]){t.next=13;break}return t.abrupt("return",{fail:'The value of `prev` of the "dogs" blog post needs to be a link (`{"/": "some-cid"}`).'});case 13:return a="zdpuAxe3g8XBLrqbp3NrjaiBLTrXjJ3SJymePGutsRRMrhAKS",s="zdpuAwwT4kGJxT7mgVZRgvmV3ke8qGNZGLuCgLhJsdBSQGM44",o="zdpuAri55PR9iW239ahcbnfkFU2TVyD5iLmqEFmwY634KZAJV",i=new pn(r.prev["/"]),t.next=19,n.dag.get(i);case 19:if(u=t.sent.value,void 0!==u.content){t.next=22;break}return t.abrupt("return",{fail:'The "dogs" blog post should link to the "computers" blog post.'});case 22:if("computers"===u.content){t.next=24;break}return t.abrupt("return",{fail:'The "dogs" blog post should link to the "computers" blog post, but it links to '.concat(u.content,".")});case 24:if(void 0!==u.prev){t.next=26;break}return t.abrupt("return",{fail:'The "computers" blog post needs to have a `prev` field.'});case 26:if(void 0!==u.prev["/"]){t.next=28;break}return t.abrupt("return",{fail:'The value of `prev` of the "computers" blog post needs to be a link (`{"/": "some-cid"}`).'});case 28:return c=new pn(u.prev["/"]),t.next=31,n.dag.get(c);case 31:if(l=t.sent.value,void 0!==l.content){t.next=34;break}return t.abrupt("return",{fail:'The "compputers" blog post should link to the "trees" blog post.'});case 34:if("trees"===l.content){t.next=36;break}return t.abrupt("return",{fail:'The "compputers" blog post should link to the "trees" blog post, but it links to '.concat(l.content,".")});case 36:if(!("prev"in l)){t.next=38;break}return t.abrupt("return",{fail:'The "trees" blog post shouldn\'t link to other blog posts.'});case 38:if(d=c.toBaseEncodedString(),d===o){t.next=41;break}return t.abrupt("return",{fail:'The "computers" blog post should link to the "trees" blog post, but it links to '.concat(d,".")});case 41:if(p=i.toBaseEncodedString(),p===s){t.next=44;break}return t.abrupt("return",{fail:'The "dogs" blog post should link to the "computers" blog post, but it links to '.concat(p,".")});case 44:if(f=e.toBaseEncodedString(),f!==a){t.next=49;break}return t.abrupt("return",{success:"All works!"});case 49:return t.abrupt("return",{fail:"The returned CID ".concat(f," did not match the expected CID ").concat(a,".")});case 50:case"end":return t.stop()}},t,this)}));return function(e,n){return t.apply(this,arguments)}}(),gn={components:{Lesson:tt},data:function(){return{code:fn,text:cn.a,validate:hn,exercise:dn.a}}},bn=gn,vn=Object(c["a"])(bn,sn,on,!1,null,null,null),mn=vn.exports,xn=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-blog-07"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,modules:t.modules,exercise:t.exercise,lessonTitle:"Hop through nodes"}})],1)},wn=[],yn=n("53Z+"),Cn=n.n(yn),kn=n("oouT"),En=n.n(kn),Sn=n("wrOu"),Tn=n("xElV"),Pn='/* globals ipfs */\nconst CID = require(\'cids\')\n\nconst traversePosts = async (cid) => {\n  // Your code goes here\n}\n\nconst run = async () => {\n  const natCid = await ipfs.dag.put({author: "Nat"})\n  const samCid = await ipfs.dag.put({author: "Sam"})\n  const treePostCid = await ipfs.dag.put({\n    content: "trees",\n    author: {"/": samCid.toBaseEncodedString()},\n    tags: ["outdoor", "hobby"]\n  })\n  const computerPostCid = await ipfs.dag.put({\n    content: "computers",\n    author: {"/": natCid.toBaseEncodedString()},\n    tags: ["hobby"],\n    prev: {"/": treePostCid.toBaseEncodedString()}\n  })\n  const dogPostCid = await ipfs.dag.put({\n    content: "dogs",\n    author: {"/": samCid.toBaseEncodedString()},\n    tags: ["funny", "hobby"],\n    prev: {"/": computerPostCid.toBaseEncodedString()}\n  })\n\n  const outdoorTagCid = await ipfs.dag.put({\n    tag: "outdoor",\n    posts: [\n      {"/": treePostCid.toBaseEncodedString()}\n    ]\n  })\n  const hobbyTagCid = await ipfs.dag.put({\n    tag: "hobby",\n    posts: [\n      {"/": treePostCid.toBaseEncodedString()},\n      {"/": computerPostCid.toBaseEncodedString()},\n      {"/": dogPostCid.toBaseEncodedString()}\n    ]\n  })\n  const funnyTagCid = await ipfs.dag.put({\n    tag: "funny",\n    posts: [\n      {"/": dogPostCid.toBaseEncodedString()}\n    ]\n  })\n\n  return traversePosts\n}\n\nreturn run',Ln=function(){var t=Object(T["a"])(regeneratorRuntime.mark(function t(e,n){var r,a,s,o,i,u,c;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if("function"===typeof e){t.next=4;break}return t.abrupt("return",{fail:"Return value needs to be a function."});case 4:return r="zdpuAxe3g8XBLrqbp3NrjaiBLTrXjJ3SJymePGutsRRMrhAKS",a="zdpuAwwT4kGJxT7mgVZRgvmV3ke8qGNZGLuCgLhJsdBSQGM44",s="zdpuAri55PR9iW239ahcbnfkFU2TVyD5iLmqEFmwY634KZAJV",t.prev=7,t.next=10,e(new Tn(r));case 10:if(o=t.sent,void 0!==o){t.next=13;break}return t.abrupt("return",{fail:"Your function needs to return 3 CIDs."});case 13:if(3===o.length){t.next=15;break}return t.abrupt("return",{fail:"Your function needs to return 3 CIDs."});case 15:if(i=o.every(Tn.isCID),i){t.next=18;break}return t.abrupt("return",{fail:"Your function needs to return CIDs"});case 18:if(u=[s,a,r],c=o.map(function(t){return new Tn(t).toBaseEncodedString()}),Sn(c.sort(),u.sort())){t.next=22;break}return t.abrupt("return",{fail:"The CIDs returned by the function ".concat(Wt.stringify(c)," did not match the the expected CIDs ").concat(Wt.stringify(u),".")});case 22:t.next=27;break;case 24:return t.prev=24,t.t0=t["catch"](7),t.abrupt("return",{fail:"Your function threw an error: ".concat(t.t0,".")});case 27:return t.abrupt("return",{success:"All works!"});case 28:case"end":return t.stop()}},t,this,[[7,24]])}));return function(e,n){return t.apply(this,arguments)}}(),_n={cids:n("xElV")},In={components:{Lesson:tt},data:function(){return{code:Pn,text:Cn.a,validate:Ln,modules:_n,exercise:En.a}}},Dn=In,Bn=Object(c["a"])(Dn,xn,wn,!1,null,null,null),An=Bn.exports;r["a"].use(a["a"]);var jn=[{path:"/",component:k},{path:"/basics/01",component:lt},{path:"/basics/02",component:Tt},{path:"/basics/03",component:Nt},{path:"/blog/01",component:re},{path:"/blog/02",component:be},{path:"/blog/03",component:Ie},{path:"/blog/04",component:Me},{path:"/blog/05",component:an},{path:"/blog/06",component:mn},{path:"/blog/07",component:An}],On=new a["a"]({routes:jn,scrollBehavior:function(t,e){return{x:0,y:0}}});r["a"].config.productionTip=!1,new r["a"]({router:On,render:function(t){return t(d)}}).$mount("#app")},YZgz:function(t,e,n){"use strict";var r=n("sYI/"),a=n.n(r);a.a},"Z/+g":function(t,e){t.exports="You can create node's using the `ipfs.dag.put` API.\n"},agfV:function(t,e,n){"use strict";var r=n("4no2"),a=n.n(r);a.a},cdGP:function(t,e,n){t.exports=n.p+"img/ipfs-logo.4831bd1a.svg"},fRSX:function(t,e){t.exports="Add a new field called `tags` whose value is an array of tags. Use the tags “outdoor” and “hobby” for the blog post about trees. The blog post about computers has only a single tag called “hobby”.\n"},gTFZ:function(t,e,n){t.exports=n.p+"img/ipfs-illustrations-how-1.acefea6d.svg"},gdnd:function(t,e){t.exports="First, you'll need to add the new blog post to the “hobby” tag.\n\nThere isn’t a node for the “funny” tag yet either, so create a new node with the same data as the other tag nodes and add a link to the blog post about dogs.\n\nReturn the CIDs of all three tag nodes.\n"},hTyn:function(t,e,n){"use strict";var r=n("Tdbp"),a=n.n(r);a.a},l5wf:function(t,e){t.exports="One important feature of DAGs is the ability to link them together.\n\nThe way you express links in the `ipfs` dag store is with an object with a\nsingle `'/'` attribute pointed at the `CID` of another node.\n\nFor example, if we wanted one node to have a link called \"foo\" pointed\nto another CID it might look like:\n\n```javascript\n{\n  foo: {'/': 'z43AaGEvwdfzjrCZ3Sq7DKxdDHrwoaPQDtqF4jfdkNEVTiqGVFW'}\n}\n```\n\nIn `js-ipfs` we tend to work with instances of `CID` from the `cids` module.\nLinks need to be expressed with a base encoded string, so to create the\nstructue above you might use:\n\n```javascript\n{\n  foo: {'/': cid.toBaseEncodedString()}\n}\n```\n"},m9oR:function(t,e){t.exports="**CID** - Content Identifier. An unique address for a block of data in IPFS that is derived from it's content.\n\n**DAG** - Directed Acyclic Graph. Blocks in IPFS form a graph as they can point to other blocks by their CID. These links can only point one direction (directed) and across the whole graph there are no loops or cycles (acyclic)"},nuG5:function(t,e){t.exports="A single object can have many links to other nodes. To illustrate this, we are creating new nodes which could be used for a tag cloud.\n\nLinks don’t necessarily need to be the value of a field (we call those “named links”) they can also be in an array.\n\n```javascript\n{ links: [\n    {'/': 'a-base-encoded-cid'},\n    {'/': 'another-base-encoded-cid'}\n  ]\n}\n```\n\nThis is perfect for our use case. Create a new node for the tags “outdoor” and “hobby”. The structure should look like this:\n\n```javavscript\n{\n  tag: \"name-of-the-tag\",\n  posts: [\n    // links to the CIDs\n  ]\n}\n```\n\nPlease note that arrays are order-dependent. This means that two arrays with the same links in a different order will get a different CID.\n"},oQ5H:function(t,e){t.exports="This exercise has some prepared code to get started faster. It resembles a blog. There are authors (Nat and Sam) and some blog posts about trees and computers. At the moment there’s no relation between them. Let’s update the blog posts so that they link to the author.\n\nIn the [basic lessons](#/basics/02) we learned that a link in IPLD is represented as an object with a slash as its only field:\n\n```javascript\nconst link = {'/': 'a-base-encoded-cid'}\n```\n"},oouT:function(t,e){t.exports="Fill in the body of the `traversePosts()` function. It takes the CID object of the most recent blog post as input. Use that to get the object from IPFS and follow the `prev` links. The return value of the function should be an array with the CID objects of all nodes (including the input CID).\n"},"sYI/":function(t,e,n){},w1U7:function(t,e){t.exports="Create a link named `bar` that points to the node we created in the first the lesson. Put it into IPFS and return it's CID.\n\nThe editor is pre-populated with the code to create the node we're linking to."},xbtC:function(t,e){t.exports="Use `ipfs.dag.put` to create a node for the data `{test: 1}`.\n\nReturn the CID from your `run()` function."},yrFN:function(t,e){t.exports="Use `ipfs.dag.get` to return the value of `test` by traversing the link from the object you `put` in the previous exercise."}});
//# sourceMappingURL=app.0c1c589c.js.map