(function(t){function e(e){for(var a,o,i=e[0],c=e[1],u=e[2],d=0,p=[];d<i.length;d++)o=i[d],s[o]&&p.push(s[o][0]),s[o]=0;for(a in c)Object.prototype.hasOwnProperty.call(c,a)&&(t[a]=c[a]);l&&l(e);while(p.length)p.shift()();return r.push.apply(r,u||[]),n()}function n(){for(var t,e=0;e<r.length;e++){for(var n=r[e],a=!0,i=1;i<n.length;i++){var c=n[i];0!==s[c]&&(a=!1)}a&&(r.splice(e--,1),t=o(o.s=n[0]))}return t}var a={},s={app:0},r=[];function o(e){if(a[e])return a[e].exports;var n=a[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=t,o.c=a,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"===typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)o.d(n,a,function(e){return t[e]}.bind(null,a));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t["default"]}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="";var i=window["webpackJsonp"]=window["webpackJsonp"]||[],c=i.push.bind(i);i.push=e,i=i.slice();for(var u=0;u<i.length;u++)e(i[u]);var l=c;r.push([1,"chunk-vendors"]),n()})({0:function(t,e){},"034f":function(t,e,n){"use strict";var a=n("64a9"),s=n.n(a);s.a},"0f80":function(t,e){t.exports="**CID** - Content Identifier. An unique address for a block of data in IPFS that is derived from its content.\n"},1:function(t,e,n){t.exports=n("56d7")},10:function(t,e){},11:function(t,e){},12:function(t,e){},13:function(t,e){},14:function(t,e){},15:function(t,e){},16:function(t,e){},17:function(t,e){},18:function(t,e){},19:function(t,e){},"1d33":function(t,e){t.exports="Our new post about dogs is completely disconnected from the others. Let's update the nodes that represent the tag cloud.\n"},2:function(t,e){},20:function(t,e){},21:function(t,e){},22:function(t,e){},23:function(t,e){},24:function(t,e){},"24df":function(t,e,n){t.exports=n.p+"img/ipfs.e7599486.svg"},"2c0f":function(t,e,n){t.exports=n.p+"img/in-progress.774a81c8.svg"},"2f66":function(t,e,n){t.exports=n.p+"img/ps_symbol_color.0e817003.svg"},3:function(t,e){},"358a":function(t,e){t.exports="Modify the two existing blog posts by adding a new field `author` that links to the author of each post. The post about trees was authored by Sam, while Nat wrote the post about computers.\n"},3975:function(t,e,n){},"39aa":function(t,e){t.exports='Create new nodes for the tags "outdoor" and "hobby" in the format shown above, linking to the relevant blog posts using arrays. Insert the new tag objects into IPFS via `ipfs.dag.put()` and return the two resulting CIDs as an array.\n'},"3f6e":function(t,e,n){},4:function(t,e){},"4e08":function(t,e,n){t.exports=n.p+"img/ipfs-illustrations-how-4.374b2b50.svg"},5:function(t,e){},"56d7":function(t,e,n){"use strict";n.r(e);n("cadf"),n("551c"),n("097d"),n("da13"),n("5680");var a=n("2b0e"),s=n("8c4f"),r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{attrs:{id:"app"}},[n("router-view")],1)},o=[],i={name:"app"},c=i,u=(n("034f"),n("2877")),l=Object(u["a"])(c,r,o,!1,null,null,null);l.options.__file="App.vue";var d=l.exports,p=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"home"},[t._m(0),t._m(1),n("section",{staticClass:"db bt border-aqua bw4 relative"},[n("div",{staticClass:"flex items-start pv4"},[t._m(2),n("div",{staticClass:"w-100 w-50-l measure-wide ph2 ph0-l"},[n("h2",{staticClass:"ma0 f3 fw5"},[t._v("P2P data links with content addressing")]),n("p",{staticClass:"f5 fw5 ma0 pt2 lh-copy measure-wide charcoal-muted"},[t._v("\n          Store, fetch, and create verifiable links between peer-hosted datasets with IPFS and CIDs. Itâ€™s graphs with friends!\n        ")]),n("ul",{staticClass:"mv4 pa0 f5",staticStyle:{"list-style-type":"none",background:"rgba(11, 58, 82, 5%)"}},[n("li",[n("ExerciseLink",{attrs:{to:"/basics/01",index:"1",name:"Create a node and return a Content Identifier (CID)"}})],1),n("li",[n("ExerciseLink",{attrs:{to:"/basics/02",index:"2",name:"Create a new node that's linked to an old one"}})],1),n("li",[n("ExerciseLink",{attrs:{to:"/basics/03",index:"3",name:"Read nested data using links"}})],1)])]),t._m(3)])]),n("section",{staticClass:"db"},[n("div",{staticClass:"flex items-start pv4"},[t._m(4),n("div",{staticClass:"w-100 w-50-l measure-wide ph2 ph0-l"},[n("h2",{staticClass:"ma0 f3 fw5 "},[t._v("Blogging on the Decentralized Web")]),n("p",{staticClass:"f5 fw5 ma0 pt2 lh-copy charcoal-muted"},[t._v("\n          Cool content addresses don't change.\n        ")]),n("ul",{staticClass:"mv4 pa0 f5",staticStyle:{"list-style-type":"none",background:"rgba(11, 58, 82, 5%)"}},[n("li",[n("ExerciseLink",{attrs:{to:"/blog/01",index:"1",name:"Link an author to a blog post using its CID"}})],1),n("li",[n("ExerciseLink",{attrs:{to:"/blog/02",index:"2",name:"Update posts with tags and watch their CIDs change"}})],1),n("li",[n("ExerciseLink",{attrs:{to:"/blog/03",index:"3",name:"Build a tag cloud with arrays of links"}})],1),n("li",[n("ExerciseLink",{attrs:{to:"/blog/04",index:"4",name:"Add a new blog post linked to an author and tags"}})],1),n("li",[n("ExerciseLink",{attrs:{to:"/blog/05",index:"5",name:"Add a new tag linked to multiple blog posts"}})],1),n("li",[n("ExerciseLink",{attrs:{to:"/blog/06",index:"6",name:"List posts chronologically with a chain of links"}})],1),n("li",[n("ExerciseLink",{attrs:{to:"/blog/07",index:"7",name:"Traverse through all posts, starting with the most recent"}})],1)])]),t._m(5)])])])},h=[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("header",{staticClass:"flex items-center bg-navy white pv3"},[a("div",{staticClass:"flex-auto"},[a("div",{staticClass:"pseudo-logo"},[a("img",{staticClass:"mr3 ml3",attrs:{src:n("2f66"),alt:"ProtoSchool"}}),a("div",{staticClass:"header-text"},[a("h1",{staticClass:"ma0 fw4"},[a("span",{staticClass:"montserrat fw4"},[t._v("Proto")]),a("span",{staticClass:"montserrat fw2"},[t._v("School")])]),a("h2",{staticClass:"ma0 montserrat fw3"},[t._v("\n              The interactive IPFS protocol workshop\n            ")])])])]),a("div",{staticClass:"flex-auto tc bonus-illustration"},[a("img",{staticStyle:{height:"70px"},attrs:{src:n("f5fb"),alt:""}})])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("section",{staticClass:"db bt border-aqua bw4"},[n("p",{staticClass:"f4 fw5 lh-copy ma0 pv4 indent-1 measure-wide"},[n("strong",[t._v("ProtoSchool is a collection of workshops")]),t._v(" that help you learn about the\n      IPFS protocol by writing code and solving challenges.\n    ")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"section-1 flex-none tc"},[a("h1",{staticClass:"ma0 f3 fw6 pb2"},[t._v("IPFS")]),a("img",{staticStyle:{height:"54px"},attrs:{src:n("24df"),alt:""}})])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"dn db-l flex-auto tc"},[a("img",{attrs:{src:n("8131"),alt:""}})])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"section-1 flex-none tc"},[a("h1",{staticClass:"ma0 f3 fw6 pb2"},[t._v("IPFS")]),a("img",{staticStyle:{height:"54px"},attrs:{src:n("24df"),alt:""}})])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"dn db-l flex-auto tc"},[a("img",{attrs:{src:n("4e08"),alt:""}})])}],f=(n("f559"),n("ac6a"),n("456d"),function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("router-link",{staticClass:"link db pa3 bb b--white green hover-bg-washed-yellow",attrs:{to:t.to}},[a("div",{staticClass:"flex"},[a("div",{staticClass:"green ttu f6",staticStyle:{"min-width":"72px"}},[t._v("Lesson "+t._s(t.index))]),a("div",{staticClass:"pr2"},[t.lessonPassed("passed"+t.to)?a("img",{staticStyle:{height:"1rem"},attrs:{src:n("ba06"),alt:"complete"}}):t.lessonCached("cached"+t.to)?a("img",{staticStyle:{height:"1rem"},attrs:{src:n("2c0f"),alt:"complete"}}):a("img",{staticStyle:{height:"1rem"},attrs:{src:n("eda5"),alt:"not yet started"}})]),a("div",{staticClass:"navy fw5 mw6"},[t._v(t._s(t.name))])])])}),g=[],b={name:"ExerciseLink",props:["to","index","name"],methods:{lessonPassed:function(t){return!!localStorage[t]},lessonCached:function(t){return!!localStorage[t]}}},v=b,m=Object(u["a"])(v,f,g,!1,null,null,null);m.options.__file="ExerciseLink.vue";var x=m.exports,w={name:"home",components:{ExerciseLink:x},data:function(t){return{firstVisit:!0}},mounted:function(){this.checkFirstVisit()},methods:{checkFirstVisit:function(){for(var t=Object.keys(localStorage),e=0;e<t.length;e++){var n=t[e];if(n.startsWith("passed")||n.startsWith("cached"))return void(this.firstVisit=!1)}this.firstVisit=!0}}},y=w,C=(n("8427"),Object(u["a"])(y,p,h,!1,null,"27a5b19b",null));C.options.__file="Home.vue";var k=C.exports,_=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-01"},[n("Lesson",{attrs:{text:t.text,validate:t.validate,exercise:t.exercise,concepts:t.concepts,lessonTitle:"Create a node and return a Content Identifier (CID)"}})],1)},S=[],P=(n("96cf"),n("1da1")),I=function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",[t._m(0),a("div",{staticClass:"flex-l items-start bt border-aqua bw4"},[a("section",{staticClass:"pv3 indent-1"},[a("h1",{staticClass:"f3 measure-wide"},[t._v(t._s(t.lessonTitle))]),a("div",{staticClass:"lh-solid v-mid"},[a("span",{staticClass:"green v-mid"},[a("span",{staticClass:"b"},[t._v(t._s(t.workshopShortname))]),t._v(" | Lesson "+t._s(t.lessonNumber)+" of "+t._s(t.lessonsInWorkshop))]),a("span",{staticClass:"pl1"},[t.lessonPassed?a("img",{staticClass:"v-mid",staticStyle:{height:"1.2rem"},attrs:{src:n("ba06"),alt:"complete"}}):t._e()])]),a("div",{staticClass:"lesson-text lh-copy measure-wide",domProps:{innerHTML:t._s(t.parsedText)}})]),t.concepts?a("section",{staticClass:"dn db-ns ba border-green ph4 ml3 ml5-l mt5 mb3 mr3 measure",staticStyle:{background:"rgba(105, 196, 205, 10%)"}},[a("h2",{staticClass:"f5 fw2 green mt0 nb1 pt3"},[t._v("Useful concepts")]),a("div",{staticClass:"f6 lh-copy",domProps:{innerHTML:t._s(t.parsedConcepts)}})]):t._e()]),a("section",{staticClass:"indent-1 exercise pb4 pt3 ph3 ph4-l mb3 mr5 flex flex-column",class:{expand:t.expandExercise},staticStyle:{background:"#F6F7F9"}},[a("div",{staticClass:"flex-none"},[a("h2",{staticClass:"mt0 mb2 green fw4 fill-current"},[a("span",{staticStyle:{"vertical-align":"-1px"}},[t.lessonPassed?a("img",{staticStyle:{height:"1rem"},attrs:{src:n("ba06"),alt:"complete"}}):t.cachedCode?a("img",{staticStyle:{height:"1rem"},attrs:{src:n("2c0f"),alt:"complete"}}):a("img",{staticStyle:{height:"1rem"},attrs:{src:n("eda5"),alt:"not yet started"}})]),a("span",{staticClass:"green ttu f6 pl2 pr1 fw7 v-mid"},[t.lessonPassed?a("span",[t._v("You did it!")]):t.cachedCode?a("span",[t._v("Keep working.")]):a("span",[t._v("Try it!")])]),a("span",{staticClass:"green f6 fw5 v-mid"},[t.cachedCode&&!t.lessonPassed?a("span",[t._v(t._s(t.cachedStateMsg))]):t._e()]),a("div",{staticClass:"fr"},[t.expandExercise?a("button",{staticClass:"b--transparent bg-transparent green hover-green-muted pointer focus-outline",attrs:{title:"go smol"},on:{click:t.toggleExpandExercise}},[a("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",fill:"currentColor",viewBox:"0 0 32 32"}},[a("path",{attrs:{d:"M16 4 L28 4 L28 16 L24 12 L20 16 L16 12 L20 8z M4 16 L8 20 L12 16 L16 20 L12 24 L16 28 L4 28z"}})])]):a("button",{staticClass:"b--transparent bg-transparent charcoal-muted hover-green pointer focus-outline",attrs:{title:"embiggen the exercise"},on:{click:t.toggleExpandExercise}},[a("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",fill:"currentColor",viewBox:"0 0 32 32"}},[a("path",{attrs:{d:"M16 4 L28 4 L28 16 L24 12 L20 16 L16 12 L20 8z M4 16 L8 20 L12 16 L16 20 L12 24 L16 28 L4 28z"}})])])])]),t.exercise?a("div",{staticClass:"lh-copy",domProps:{innerHTML:t._s(t.parsedExercise)}}):t._e()]),a("div",[t.cachedCode?a("span",{staticClass:"textLink fr pb1",on:{click:t.resetCode}},[t._v("Reset Code")]):t._e()]),a("div",{staticClass:"bg-white flex-auto",staticStyle:{height:"100%"}},[a("MonacoEditor",{staticClass:"editor",attrs:{srcPath:".",height:t.editorHeight,options:t.options,code:t.code,theme:"vs",language:"javascript"},on:{mounted:t.onMounted,codeChange:t.onCodeChange}})],1),a("div",{staticClass:"flex-none"},[a("div",{staticClass:"pv2"},[t.output.test&&this.cachedCode?a("div",t._b({},"div",t.output.test,!1),[t.output.test.error?a("div",{staticClass:"lh-copy pv2 ph3 bg-red white"},[t._v("\n            Error: "+t._s(t.output.test.error.message)+"\n          ")]):t._e(),t.output.test.fail?a("div",{staticClass:"lh-copy pv2 ph3 bg-red white"},[t._v("\n            "+t._s(t.output.test.fail)+"\n          ")]):t._e(),t.output.test.success&&t.lessonPassed?a("div",{staticClass:"lh-copy pv2 ph3 bg-green white"},[t._v("\n            "+t._s(t.output.test.success)+"\n            "),t.output.test.cid?a("a",{staticClass:"link fw7 underline-hover dib ph2 mh2 white",attrs:{target:"explore-ipld",href:t.exploreIpldUrl}},[t._v("\n              View in IPLD Explorer\n            ")]):t._e()]):t._e()]):a("div",{staticClass:"lh-copy pv2 ph3"},[t._v("\n        Update the code to complete the exercise. Click "),a("strong",[t._v("submit")]),t._v(" to check your answer.\n        ")])]),a("div",{staticClass:"pt3 ph2 tr"},[(t.output.test&&t.output.test.success||t.lessonPassed)&&t.lessonNumber===t.lessonsInWorkshop?a("div",[a("Button",{staticClass:"bg-aqua white",attrs:{click:t.workshopMenu}},[t._v("More Workshops")])],1):t.lessonPassed?a("div",[a("Button",{staticClass:"bg-aqua white",attrs:{click:t.next}},[t._v("Next")])],1):a("div",[a("Button",{staticClass:"bg-green white",attrs:{click:t.run}},[t._v("Submit")])],1)])])]),a("section",{staticClass:"indent-1 mb4 mw-900"},[a("div",[a("p",[t._v("Feeling stuck? We'd love to hear what's confusing so we can improve\n      this lesson. Please "),a("a",{attrs:{href:t.issueUrl,target:"_blank"}},[t._v("share your questions and feedback")]),t._v(".")])])])])},T=[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("header",{staticClass:"bg-navy pa2 pa3-ns flex items-center justify-around"},[a("a",{staticClass:"db-ns link flex-auto",attrs:{href:"/#/"}},[a("img",{staticClass:"ml3-ns",staticStyle:{height:"80px"},attrs:{src:n("ef34"),alt:"ProtoSchool"}})]),a("div",{staticClass:"tr dn db-ns"},[a("img",{staticStyle:{height:"50px"},attrs:{src:n("f5fb"),alt:""}})])])}],L=(n("28a5"),n("6b54"),n("f5766"),n("7f7f"),n("2c43"),n("dba0")),D=n.n(L),E=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"explorer"},[n("iframe",{attrs:{src:t.src}})])},A=[],j={data:function(t){var e=t.$attrs.cid;e=e.toBaseEncodedString?e.toBaseEncodedString():e;var n="https://ipfs.io/ipfs/QmeznoNAoUcQdCFEEz4ktv4zLfYYyhVNin28Frsv8LLxCb/?embed=true#/explore/".concat(e);return{src:n}}},F=j,O=(n("d21f"),Object(u["a"])(F,E,A,!1,null,"d9fc3ea4",null));O.options.__file="Explorer.vue";var $=O.exports,R=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("button",{staticClass:"avenir dib v-mid fw7 nowrap lh-copy bn br1 pv2 ph3 pointer focus-outline",on:{click:t.click}},[t._t("default",[t._v("Submit")])],2)},B=[],q={props:{click:{type:Function,required:!0}}},N=q,M=(n("6a07"),Object(u["a"])(N,R,B,!1,null,"6f2f165f",null));M.options.__file="Button.vue";var Y=M.exports,z=n("cde5"),W=n("c449"),U=n("0e54"),J=n("a70e");J.registerLanguage("js",n("4dd1")),J.registerLanguage("javascript",n("4dd1")),J.registerLanguage("json",n("5ad2")),U.setOptions({highlight:function(t){return J.highlightAuto(t).value}});var K,V=function(){var t=Object(P["a"])(regeneratorRuntime.mark(function t(e,n){var a,s,r,o,i=arguments;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:return a=i.length>2&&void 0!==i[2]?i[2]:{},t.next=3,new Promise(function(t){return n.on("ready",t)});case 3:t.prev=3,s=new Function("ipfs","require",e),t.next=11;break;case 7:return t.prev=7,t.t0=t["catch"](3),r={error:t.t0},t.abrupt("return",r);case 11:return o=function(t){if(!a[t])throw new Error("Cannot find modules: ".concat(t));return a[t]},t.prev=12,t.next=15,s(n,o)();case 15:r=t.sent,t.next=21;break;case 18:t.prev=18,t.t1=t["catch"](12),r={error:t.t1};case 21:return t.abrupt("return",r);case 22:case"end":return t.stop()}},t,this,[[3,7],[12,18]])}));return function(e,n){return t.apply(this,arguments)}}(),G="/* globals ipfs */\n\nconst run = async () => {\n  // your code goes here!\n  // be sure this function returns the requested value\n}\n\nreturn run\n\n",Q={components:{MonacoEditor:D.a,Explorer:$,Button:Y},data:function(t){return{text:t.$attrs.text,exercise:t.$attrs.exercise,concepts:t.$attrs.concepts,cachedCode:!!localStorage["cached"+t.$route.path],code:localStorage[t.cacheKey]||t.$attrs.code||G,parsedText:U(t.$attrs.text),parsedExercise:U(t.$attrs.exercise||""),parsedConcepts:U(t.$attrs.concepts||""),cacheKey:"cached"+t.$route.path,cachedStateMsg:"",lessonKey:"passed"+t.$route.path,lessonPassed:!!localStorage["passed"+t.$route.path],lessonTitle:t.$attrs.lessonTitle,issueUrl:"https://github.com/ipfs-shipyard/proto.school/issues/new?labels=question&title=Question+on+Lesson+".concat(t.$route.path.slice(t.$route.path.lastIndexOf("/")+1),":+").concat(t.$attrs.lessonTitle,"+(").concat(t.$route.path,")&body=Have%20a%20question%20or%20suggestion%20regarding%20a%20ProtoSchool%20lesson%3F%20Please%20use%20this%0Atemplate%20to%20share%20it!%0A%0A1.%20URL%20of%20the%20lesson%20that's%20confusing%3A%0A%20https%3A%2F%2Fproto.school%2F%23").concat(t.$route.path,"%0A%0A2.%20What%27s%20confusing%20about%20this%20lesson%3F%0A%0A3.%20What%20additional%20context%20could%20we%20provide%20to%20help%20you%20succeed%3F%0A%0A4.%20What%20other%20feedback%20would%20you%20like%20to%20share%20about%20ProtoSchool%3F%0A"),output:t.output,IPFS:z,expandExercise:!1,options:{selectOnLineNumbers:!1,lineNumbersMinChars:3,scrollBeyondLastLine:!1,automaticLayout:!0}}},computed:{exploreIpldUrl:function(){var t=this.output.test&&this.output.test.cid&&this.output.test.cid.toBaseEncodedString();return t=t||"","https://ipfs.io/ipfs/QmYJETQ15RAnKXoJxqpXzcvQ2DuQA35UHwJBTjTPCSs9Ky/#/explore/".concat(t)},lessonNumber:function(){return parseInt(this.$route.path.slice(this.$route.path.lastIndexOf("/")+1),10)},workshopShortname:function(){return this.$route.path.charAt(1).toUpperCase()+this.$route.path.slice(2,this.$route.path.lastIndexOf("/"))},lessonsInWorkshop:function(){var t=this.$route.path.slice(0,-2),e=this.$route.path.slice(-2);while("404"!==this.$router.resolve(t+e).route.name)e++,e=e.toString().padStart(2,"0");return parseInt(e)-1},editorHeight:function(){if(!this.expandExercise){var t=18,e=Math.min(Math.max(this.code.split("\n").length,12),25),n=e*t;return n}}},beforeCreate:function(){this.output={}},updated:function(){},beforeUpdate:function(){},methods:{run:function(){var t=Object(P["a"])(regeneratorRuntime.mark(function t(){var e,n,s,r,o,i;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:return K&&(K.stop(),K=null),e=this.output,n=this.createIPFS(),s=this.editor.getValue(),r={},this.$attrs.modules&&(r=this.$attrs.modules),t.next=8,V(s,n,r);case 8:if(o=t.sent,!o||!o.error){t.next=13;break}return a["a"].set(e,"test",o),this.lessonPassed=!!localStorage[this.lessonKey],t.abrupt("return");case 13:return t.next=15,this.$attrs.validate(o,n);case 15:i=t.sent,a["a"].set(e,"test",i),W.isCID(o)?(K=n,a["a"].set(e.test,"cid",o)):n.stop(),e.test.success&&(localStorage[this.lessonKey]="passed"),this.lessonPassed=!!localStorage[this.lessonKey];case 20:case"end":return t.stop()}},t,this)}));function e(){return t.apply(this,arguments)}return e}(),createIPFS:function(){return this.$attrs.createIPFS?this.$attrs.createIPFS():new z({repo:Math.random().toString()})},resetCode:function(){this.code=this.$attrs.code||G,this.editor.setValue(this.code),this.clearPassed()},clearPassed:function(){delete localStorage[this.lessonKey],this.lessonPassed=!!localStorage[this.lessonKey]},loadCodeFromCache:function(){this.code=localStorage[this.cacheKey],this.editor.setValue(this.code)},onMounted:function(t){this.editor=t,this.cachedCode&&(this.loadCodeFromCache(),this.cachedStateMsg="Pick up where you left off. We've saved your code for you!",this.lessonPassed&&this.run())},onCodeChange:function(){this.editor.getValue()===(this.$attrs.code||G)?(delete localStorage[this.cacheKey],this.cachedCode=!!localStorage[this.cacheKey]):this.code===this.editor.getValue()||(localStorage[this.cacheKey]=this.editor.getValue(),this.code=this.editor.getValue(),this.cachedCode=!!localStorage[this.cacheKey],this.cachedStateMsg="We're saving your code as you go.")},next:function(){a["a"].set(this.output,"test",null);var t=this.lessonNumber,e=(parseInt(t)+1).toString().padStart(2,"0");this.$router.push({path:e})},workshopMenu:function(){a["a"].set(this.output,"test",null),this.$router.push({path:"/"})},toggleExpandExercise:function(){this.expandExercise=!this.expandExercise}}},H=Q,Z=(n("fccb"),Object(u["a"])(H,I,T,!1,null,"747cac2e",null));Z.options.__file="Lesson.vue";var X=Z.exports,tt=n("67ff"),et=n.n(tt),nt=n("0f80"),at=n.n(nt),st=n("c5bb"),rt=n.n(st),ot=n("c449"),it=function(){var t=Object(P["a"])(regeneratorRuntime.mark(function t(e,n){var a,s,r,o,i;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if(ot.isCID(e)){t.next=4;break}return t.abrupt("return",{fail:"Did not return a valid CID instance."});case 4:if(a="zdpuApm55Qv2zRxb3KKjVUxhQSw2r4a7jeiDV7163yCQnfivy",e.toBaseEncodedString()!==a){t.next=9;break}return t.abrupt("return",{success:"Everything works!"});case 9:return t.next=11,n.dag.get(e);case 11:return s=t.sent,r=JSON.stringify({test:1}),o=JSON.stringify(s.value),i='Was expecting "'.concat(r,'" but got "').concat(o,'"'),t.abrupt("return",{fail:i});case 16:case"end":return t.stop()}},t,this)}));return function(e,n){return t.apply(this,arguments)}}(),ct={components:{Lesson:X},data:function(){return{text:et.a,validate:it,exercise:rt.a,concepts:at.a}}},ut=ct,lt=Object(u["a"])(ut,_,S,!1,null,null,null);lt.options.__file="01.vue";var dt=lt.exports,pt=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-02"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,modules:t.modules,exercise:t.exercise,concepts:t.concepts,lessonTitle:"Create a new node that's linked to an old one"}})],1)},ht=[],ft=n("979c"),gt=n.n(ft),bt=n("9bda"),vt=n.n(bt),mt=n("c355"),xt=n.n(mt),wt=n("c449"),yt="/* globals ipfs */\n\nconst run = async () => {\n  let cid = await ipfs.dag.put({test: 1})\n  // your code goes here\n}\n\nreturn run\n",Ct=function(){var t=Object(P["a"])(regeneratorRuntime.mark(function t(e,n){var a,s,r,o,i;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if(wt.isCID(e)){t.next=4;break}return t.abrupt("return",{fail:"Did not return a valid CID instance."});case 4:if(a="zdpuAoPanArLvuFtuvmLYuSvp8zE8wuKSMZUkMN8Y1PaHLvKP",e.toBaseEncodedString()!==a){t.next=9;break}return t.abrupt("return",{success:"Everything works!"});case 9:return t.next=11,n.dag.get(e);case 11:return s=t.sent,r=JSON.stringify({bar:new wt(a)}),o=JSON.stringify(s.value),i='Was expecting "'.concat(r,'" but got "').concat(o,'"'),t.abrupt("return",{fail:i});case 16:case"end":return t.stop()}},t,this)}));return function(e,n){return t.apply(this,arguments)}}(),kt={cids:n("c449")},_t={components:{Lesson:X},data:function(){return{code:yt,text:gt.a,validate:Ct,modules:kt,exercise:xt.a,concepts:vt.a}}},St=_t,Pt=Object(u["a"])(St,pt,ht,!1,null,null,null);Pt.options.__file="02.vue";var It=Pt.exports,Tt=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-03"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,modules:t.modules,exercise:t.exercise,lessonTitle:"Read nested data using links"}})],1)},Lt=[],Dt=n("d4ea"),Et=n.n(Dt),At=n("cab1"),jt=n.n(At),Ft="/* globals ipfs */\n\nconst run = async () => {\n  let cid = await ipfs.dag.put({test: 1})\n  let cid2 = await ipfs.dag.put({bar: cid})\n  /* your code goes here */\n}\n\nreturn run\n",Ot=function(){var t=Object(P["a"])(regeneratorRuntime.mark(function t(e,n){var a,s,r;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if(1!==e){t.next=4;break}return t.abrupt("return",{success:"Great job, got 1."});case 4:if(1!==e.value||""!==e.remainderPath){t.next=8;break}return t.abrupt("return",{success:"Great job! You've completed this series of lessons!"});case 8:return a=JSON.stringify({value:1,remainderPath:""}),s=JSON.stringify(e),r='Was expecting "'.concat(a,'" but got "').concat(s,'".'),t.abrupt("return",{fail:r});case 12:case"end":return t.stop()}},t,this)}));return function(e,n){return t.apply(this,arguments)}}(),$t={cids:n("c449")},Rt={components:{Lesson:X},data:function(){return{code:Ft,text:Et.a,validate:Ot,modules:$t,exercise:jt.a}}},Bt=Rt,qt=Object(u["a"])(Bt,Tt,Lt,!1,null,null,null);qt.options.__file="03.vue";var Nt=qt.exports,Mt=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-blog-01"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,exercise:t.exercise,lessonTitle:"Link an author to a blog post using its CID"}})],1)},Yt=[],zt=(n("6762"),n("2fdb"),n("ac4d"),n("8a81"),n("55dd"),n("a10e")),Wt=n.n(zt),Ut=n("358a"),Jt=n.n(Ut),Kt=(n("a481"),n("c449")),Vt=function(t){return JSON.stringify(t,null," ").replace("\n","")},Gt=function(t,e){if(!Array.isArray(t)||t.length!==e)return{fail:"You need to return an array of ".concat(e," CIDs")};var n=t.every(Kt.isCID);return n?{success:""}:{fail:"Array elements need to be CIDs"}},Qt={stringify:Vt,validateArrayOfCids:Gt},Ht=n("c2b3"),Zt=n("c449"),Xt='/* globals ipfs */\n\nconst run = async () => {\n  const natCid = await ipfs.dag.put({author: "Nat"})\n  const samCid = await ipfs.dag.put({author: "Sam"})\n\n  // Modify the blog posts below\n\n  const treePostCid = await ipfs.dag.put({content: "trees"})\n  const computerPostCid = await ipfs.dag.put({content: "computers"})\n\n  return [treePostCid, computerPostCid]\n}\n\nreturn run\n',te=function(){var t=Object(P["a"])(regeneratorRuntime.mark(function t(e,n){var a,s,r,o,i,c,u,l,d,p,h,f,g,b,v;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if(a=Qt.validateArrayOfCids(e,2),!a.fail){t.next=5;break}return t.abrupt("return",a);case 5:s="zdpuAyB57Xn8fuPvM8Gam5ycJTz6bgzLqtQBihyFuh5T7a6SK",r="zdpuAzUoWGnKe4p13YbexQrb5AMhnDWDCqJt2XyqVPU6DxS4m",o=!0,i=!1,c=void 0,t.prev=10,u=e[Symbol.iterator]();case 12:if(o=(l=u.next()).done){t.next=38;break}return d=l.value,t.next=16,n.dag.get(d);case 16:if(p=t.sent,h=p.value,void 0!==h.author){t.next=20;break}return t.abrupt("return",{fail:"Blog posts need to have an `author` field."});case 20:if(Zt.isCID(h.author)){t.next=22;break}return t.abrupt("return",{fail:'The value of `author` needs to be a link (`{"/": "some-cid"}`).'});case 22:if(f=h.author,[s,r].includes(f.toBaseEncodedString())){t.next=25;break}return t.abrupt("return",{fail:"You need to link to the CID of an author (Nat or Sam)."});case 25:g=void 0,t.t0=h.content,t.next="trees"===t.t0?29:"computers"===t.t0?31:33;break;case 29:return g=r,t.abrupt("break",33);case 31:return g=s,t.abrupt("break",33);case 33:if(f.toBaseEncodedString()===g){t.next=35;break}return t.abrupt("return",{fail:'The author of the "'.concat(h.content,'" blog post (').concat(f,") did not match the the expected author (").concat(g,").")});case 35:o=!0,t.next=12;break;case 38:t.next=44;break;case 40:t.prev=40,t.t1=t["catch"](10),i=!0,c=t.t1;case 44:t.prev=44,t.prev=45,o||null==u.return||u.return();case 47:if(t.prev=47,!i){t.next=50;break}throw c;case 50:return t.finish(47);case 51:return t.finish(44);case 52:if(b=["zdpuAkSPEnmgR1rqKkzpFN5qfJshCQKqMaVtUSpQJAMLdw3KF","zdpuAxzw762rP3CXZpAsKagPFR2AyqmZU2sN8U1GuVCeoYUEo"],v=e.map(function(t){return t.toBaseEncodedString()}),!Ht(v.sort(),b.sort())){t.next=58;break}return t.abrupt("return",{success:"Everything works!"});case 58:return t.abrupt("return",{fail:"The returned CIDs ".concat(Qt.stringify(v)," did not match the expected CIDs ").concat(Qt.stringify(b),".")});case 59:case"end":return t.stop()}},t,this,[[10,40,44,52],[45,,47,51]])}));return function(e,n){return t.apply(this,arguments)}}(),ee={components:{Lesson:X},data:function(){return{code:Xt,text:Wt.a,validate:te,exercise:Jt.a}}},ne=ee,ae=Object(u["a"])(ne,Mt,Yt,!1,null,null,null);ae.options.__file="01.vue";var se=ae.exports,re=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-blog-02"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,exercise:t.exercise,lessonTitle:"Update posts with tags and watch their CIDs change"}})],1)},oe=[],ie=n("df39"),ce=n.n(ie),ue=n("7d14"),le=n.n(ue),de=n("c2b3"),pe='/* globals ipfs */\n\nconst run = async () => {\n  const natCid = await ipfs.dag.put({author: "Nat"})\n  const samCid = await ipfs.dag.put({author: "Sam"})\n\n  // Modify the blog posts below\n\n  const treePostCid = await ipfs.dag.put({\n    content: "trees",\n    author: samCid\n  })\n  const computerPostCid = await ipfs.dag.put({\n    content: "computers",\n    author: natCid\n  })\n\n  console.log(\'post about trees:\', treePostCid.toBaseEncodedString())\n  console.log(\'post about computers:\', computerPostCid.toBaseEncodedString())\n\n  return [treePostCid, computerPostCid]\n}\n\nreturn run',he=function(){var t=Object(P["a"])(regeneratorRuntime.mark(function t(e,n){var a,s,r,o,i,c,u,l,d,p,h;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if(a=Qt.validateArrayOfCids(e,2),!a.fail){t.next=5;break}return t.abrupt("return",a);case 5:s=!0,r=!1,o=void 0,t.prev=8,i=e[Symbol.iterator]();case 10:if(s=(c=i.next()).done){t.next=36;break}return u=c.value,t.next=14,n.dag.get(u);case 14:if(l=t.sent,d=l.value,void 0!==d.tags){t.next=18;break}return t.abrupt("return",{fail:"Blog posts need to have a `tags` field."});case 18:if(Array.isArray(d.tags)){t.next=20;break}return t.abrupt("return",{fail:"The value of the `tags` field must be an array of strings."});case 20:if(p=d.tags.every(function(t){return"string"===typeof t}),p){t.next=23;break}return t.abrupt("return",{fail:"Tags need to be strings."});case 23:h=void 0,t.t0=d.content,t.next="trees"===t.t0?27:"computers"===t.t0?29:31;break;case 27:return h=["hobby","outdoor"],t.abrupt("break",31);case 29:return h=["hobby"],t.abrupt("break",31);case 31:if(de(d.tags.sort(),h.sort())){t.next=33;break}return t.abrupt("return",{fail:'The tags of the "'.concat(d.content,'" blog post ').concat(Qt.stringify(d.tags)," did not match the the expected tags ").concat(Qt.stringify(h),".")});case 33:s=!0,t.next=10;break;case 36:t.next=42;break;case 38:t.prev=38,t.t1=t["catch"](8),r=!0,o=t.t1;case 42:t.prev=42,t.prev=43,s||null==i.return||i.return();case 45:if(t.prev=45,!r){t.next=48;break}throw o;case 48:return t.finish(45);case 49:return t.finish(42);case 50:return t.abrupt("return",{success:"Everything works! Did you remember to check the console logs?"});case 51:case"end":return t.stop()}},t,this,[[8,38,42,50],[43,,45,49]])}));return function(e,n){return t.apply(this,arguments)}}(),fe={components:{Lesson:X},data:function(){return{code:pe,text:ce.a,validate:he,exercise:le.a}}},ge=fe,be=Object(u["a"])(ge,re,oe,!1,null,null,null);be.options.__file="02.vue";var ve=be.exports,me=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-blog-03"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,exercise:t.exercise,lessonTitle:"Build a tag cloud with arrays of links"}})],1)},xe=[],we=n("9ee1"),ye=n.n(we),Ce=n("39aa"),ke=n.n(Ce),_e=n("c2b3"),Se=n("c449"),Pe='/* globals ipfs */\n\nconst run = async () => {\n  const natCid = await ipfs.dag.put({author: "Nat"})\n  const samCid = await ipfs.dag.put({author: "Sam"})\n  const treePostCid = await ipfs.dag.put({\n    content: "trees",\n    author: samCid,\n    tags: ["outdoor", "hobby"]\n  })\n  const computerPostCid = await ipfs.dag.put({\n    content: "computers",\n    author: natCid,\n    tags: ["hobby"]\n  })\n\n  // Add your code here\n}\n\nreturn run',Ie=function(){var t=Object(P["a"])(regeneratorRuntime.mark(function t(e,n){var a,s,r,o,i,c,u,l,d,p,h,f,g,b;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if(a=Qt.validateArrayOfCids(e,2),!a.fail){t.next=5;break}return t.abrupt("return",a);case 5:s=!0,r=!1,o=void 0,t.prev=8,i=e[Symbol.iterator]();case 10:if(s=(c=i.next()).done){t.next=44;break}return u=c.value,t.next=14,n.dag.get(u);case 14:if(l=t.sent,d=l.value,void 0!==d.tag){t.next=18;break}return t.abrupt("return",{fail:"Tag nodes need to have a `tag` field."});case 18:if("string"===typeof d.tag){t.next=20;break}return t.abrupt("return",{fail:"`tag` field needs to be a string."});case 20:if(void 0!==d.posts){t.next=22;break}return t.abrupt("return",{fail:"Tag nodes need to have a `posts` field."});case 22:if(Array.isArray(d.posts)){t.next=24;break}return t.abrupt("return",{fail:"The value of the `posts` field must be an array of links."});case 24:if(p=d.posts.every(function(t){return Se.isCID(t)}),p){t.next=27;break}return t.abrupt("return",{fail:"The values of the `posts` array must be links."});case 27:h="zdpuAri55PR9iW239ahcbnfkFU2TVyD5iLmqEFmwY634KZAJV",f="zdpuAqaHPSosSZFRPe7u5q3yNqgg4JuvrLaUJxGamNPLhWivX",g=void 0,t.t0=d.tag,t.next="hobby"===t.t0?33:"outdoor"===t.t0?35:37;break;case 33:return g=[h,f],t.abrupt("break",38);case 35:return g=[h],t.abrupt("break",38);case 37:return t.abrupt("return",{fail:"Wrong tag (".concat(d.tag,'). Did you mean "hobby" or "outdoor"?')});case 38:if(b=d.posts.map(function(t){return t.toBaseEncodedString()}),_e(b.sort(),g.sort())){t.next=41;break}return t.abrupt("return",{fail:'The posts of the tag "'.concat(d.tag,'" ').concat(Qt.stringify(b)," did not match the the expected posts ").concat(Qt.stringify(g),".")});case 41:s=!0,t.next=10;break;case 44:t.next=50;break;case 46:t.prev=46,t.t1=t["catch"](8),r=!0,o=t.t1;case 50:t.prev=50,t.prev=51,s||null==i.return||i.return();case 53:if(t.prev=53,!r){t.next=56;break}throw o;case 56:return t.finish(53);case 57:return t.finish(50);case 58:return t.abrupt("return",{success:"Everything works!"});case 59:case"end":return t.stop()}},t,this,[[8,46,50,58],[51,,53,57]])}));return function(e,n){return t.apply(this,arguments)}}(),Te={components:{Lesson:X},data:function(){return{code:Pe,text:ye.a,validate:Ie,exercise:ke.a}}},Le=Te,De=Object(u["a"])(Le,me,xe,!1,null,null,null);De.options.__file="03.vue";var Ee=De.exports,Ae=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-blog-04"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,exercise:t.exercise,lessonTitle:"Add a new blog post linked to an author and tags"}})],1)},je=[],Fe=n("f211"),Oe=n.n(Fe),$e=n("d56b"),Re=n.n($e),Be=n("c2b3"),qe=n("c449"),Ne='/* globals ipfs */\n\nconst run = async () => {\n  const natCid = await ipfs.dag.put({author: "Nat"})\n  const samCid = await ipfs.dag.put({author: "Sam"})\n  const treePostCid = await ipfs.dag.put({\n    content: "trees",\n    author: samCid,\n    tags: ["outdoor", "hobby"]\n  })\n  const computerPostCid = await ipfs.dag.put({\n    content: "computers",\n    author: natCid,\n    tags: ["hobby"]\n  })\n\n  // Add your code here\n\n  const outdoorTagCid = await ipfs.dag.put({\n    tag: "outdoor",\n    posts: [ treePostCid ]\n  })\n  const hobbyTagCid = await ipfs.dag.put({\n    tag: "hobby",\n    posts: [ treePostCid, computerPostCid ]\n  })\n}\n\nreturn run',Me=function(){var t=Object(P["a"])(regeneratorRuntime.mark(function t(e,n){var a,s,r,o,i;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if(qe.isCID(e)){t.next=4;break}return t.abrupt("return",{fail:"Did not return a valid CID instance."});case 4:return t.next=6,n.dag.get(e);case 6:if(a=t.sent.value,void 0!==a.content){t.next=9;break}return t.abrupt("return",{fail:"Blog post needs to have a `content` field."});case 9:if("dogs"===a.content){t.next=11;break}return t.abrupt("return",{fail:'The `content` of the new blog post must be "dogs".'});case 11:if(void 0!==a.author){t.next=13;break}return t.abrupt("return",{fail:"Blog post needs to have an `author` field."});case 13:if(qe.isCID(a.author)){t.next=15;break}return t.abrupt("return",{fail:"The value of `author` needs to be a link."});case 15:if(s="zdpuAzUoWGnKe4p13YbexQrb5AMhnDWDCqJt2XyqVPU6DxS4m",r=a.author.toBaseEncodedString(),r===s){t.next=19;break}return t.abrupt("return",{fail:"The author of the new blog post needs to be Sam."});case 19:if(void 0!==a.tags){t.next=21;break}return t.abrupt("return",{fail:"Blog post needs to have a `tags` field."});case 21:if(Array.isArray(a.tags)){t.next=23;break}return t.abrupt("return",{fail:"The value of the `tags` field must be an array of strings."});case 23:if(o=a.tags.every(function(t){return"string"===typeof t}),o){t.next=26;break}return t.abrupt("return",{fail:"Tags need to be strings."});case 26:if(i=["funny","hobby"],Be(a.tags.sort(),i.sort())){t.next=29;break}return t.abrupt("return",{fail:'The tags of the "'.concat(a.content,'" blog post ').concat(Qt.stringify(a.tags)," did not match the the expected tags ").concat(Qt.stringify(i),".")});case 29:return t.abrupt("return",{success:"Everything works!"});case 30:case"end":return t.stop()}},t,this)}));return function(e,n){return t.apply(this,arguments)}}(),Ye={components:{Lesson:X},data:function(){return{code:Ne,text:Oe.a,validate:Me,exercise:Re.a}}},ze=Ye,We=Object(u["a"])(ze,Ae,je,!1,null,null,null);We.options.__file="04.vue";var Ue=We.exports,Je=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-blog-05"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,exercise:t.exercise,lessonTitle:"Add a new tag linked to multiple blog posts"}})],1)},Ke=[],Ve=n("1d33"),Ge=n.n(Ve),Qe=n("81d9"),He=n.n(Qe),Ze=n("c2b3"),Xe=n("c449"),tn='/* globals ipfs */\n\nconst run = async () => {\n  const natCid = await ipfs.dag.put({author: "Nat"})\n  const samCid = await ipfs.dag.put({author: "Sam"})\n  const treePostCid = await ipfs.dag.put({\n    content: "trees",\n    author: samCid,\n    tags: ["outdoor", "hobby"]\n  })\n  const computerPostCid = await ipfs.dag.put({\n    content: "computers",\n    author: natCid,\n    tags: ["hobby"]\n  })\n  const dogPostCid = await ipfs.dag.put({\n    content: "dogs",\n    author: samCid,\n    tags: ["funny", "hobby"]\n  })\n\n  const outdoorTagCid = await ipfs.dag.put({\n    tag: "outdoor",\n    posts: [ treePostCid ]\n  })\n  const hobbyTagCid = await ipfs.dag.put({\n    tag: "hobby",\n    posts: [ treePostCid, computerPostCid ]\n  })\n\n  // Add your new code here and modify the tags above\n}\n\nreturn run',en=function(){var t=Object(P["a"])(regeneratorRuntime.mark(function t(e,n){var a,s,r,o,i,c,u,l,d,p,h,f,g,b,v;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if(a=Qt.validateArrayOfCids(e,3),!a.fail){t.next=5;break}return t.abrupt("return",a);case 5:s=!0,r=!1,o=void 0,t.prev=8,i=e[Symbol.iterator]();case 10:if(s=(c=i.next()).done){t.next=47;break}return u=c.value,t.next=14,n.dag.get(u);case 14:if(l=t.sent,d=l.value,void 0!==d.tag){t.next=18;break}return t.abrupt("return",{fail:"Tag nodes need to have a `tag` field."});case 18:if("string"===typeof d.tag){t.next=20;break}return t.abrupt("return",{fail:"`tag` field needs to be a string."});case 20:if(void 0!==d.posts){t.next=22;break}return t.abrupt("return",{fail:"Tag nodes need to have a `posts` field."});case 22:if(Array.isArray(d.posts)){t.next=24;break}return t.abrupt("return",{fail:"The value of the `posts` field must be an array of links."});case 24:if(p=d.posts.every(function(t){return Xe.isCID(t)}),p){t.next=27;break}return t.abrupt("return",{fail:"The values of the `posts` array must be links."});case 27:h=void 0,f="zdpuAri55PR9iW239ahcbnfkFU2TVyD5iLmqEFmwY634KZAJV",g="zdpuAqaHPSosSZFRPe7u5q3yNqgg4JuvrLaUJxGamNPLhWivX",b="zdpuAuaznfNPWfgSSrcGxkm3yqyssY6mz8i5T2gxqpEpNExG6",t.t0=d.tag,t.next="funny"===t.t0?34:"hobby"===t.t0?36:"outdoor"===t.t0?38:40;break;case 34:return h=[b],t.abrupt("break",41);case 36:return h=[f,g,b],t.abrupt("break",41);case 38:return h=[f],t.abrupt("break",41);case 40:return t.abrupt("return",{fail:"Wrong tag (".concat(d.tag,"). Did you mean one of funny, hobby, outdoor?")});case 41:if(v=d.posts.map(function(t){return t.toBaseEncodedString()}),Ze(v.sort(),h.sort())){t.next=44;break}return t.abrupt("return",{fail:'The posts of the tag "'.concat(d.tag,'" ').concat(Qt.stringify(v)," did not match the the expected posts ").concat(Qt.stringify(h),".")});case 44:s=!0,t.next=10;break;case 47:t.next=53;break;case 49:t.prev=49,t.t1=t["catch"](8),r=!0,o=t.t1;case 53:t.prev=53,t.prev=54,s||null==i.return||i.return();case 56:if(t.prev=56,!r){t.next=59;break}throw o;case 59:return t.finish(56);case 60:return t.finish(53);case 61:return t.abrupt("return",{success:"Everything works!"});case 62:case"end":return t.stop()}},t,this,[[8,49,53,61],[54,,56,60]])}));return function(e,n){return t.apply(this,arguments)}}(),nn={components:{Lesson:X},data:function(){return{code:tn,text:Ge.a,validate:en,exercise:He.a}}},an=nn,sn=Object(u["a"])(an,Je,Ke,!1,null,null,null);sn.options.__file="05.vue";var rn=sn.exports,on=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-blog-06"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,exercise:t.exercise,lessonTitle:"List posts chronologically with a chain of links"}})],1)},cn=[],un=n("d39a"),ln=n.n(un),dn=n("e522"),pn=n.n(dn),hn=n("c449"),fn='/* globals ipfs */\n\nconst run = async () => {\n  const natCid = await ipfs.dag.put({author: "Nat"})\n  const samCid = await ipfs.dag.put({author: "Sam"})\n\n  // Modify the blog posts below\n\n  const treePostCid = await ipfs.dag.put({\n    content: "trees",\n    author: samCid,\n    tags: ["outdoor", "hobby"]\n  })\n  const computerPostCid = await ipfs.dag.put({\n    content: "computers",\n    author: natCid,\n    tags: ["hobby"]\n  })\n  const dogPostCid = await ipfs.dag.put({\n    content: "dogs",\n    author: samCid,\n    tags: ["funny", "hobby"]\n  })\n\n  const outdoorTagCid = await ipfs.dag.put({\n    tag: "outdoor",\n    posts: [ treePostCid ]\n  })\n  const hobbyTagCid = await ipfs.dag.put({\n    tag: "hobby",\n    posts: [ treePostCid, computerPostCid, dogPostCid ]\n  })\n  const funnyTagCid = await ipfs.dag.put({\n    tag: "funny",\n    posts: [ dogPostCid ]\n  })\n\n  return dogPostCid\n}\n\nreturn run',gn=function(){var t=Object(P["a"])(regeneratorRuntime.mark(function t(e,n){var a,s,r,o,i,c,u,l,d,p,h;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if(hn.isCID(e)){t.next=4;break}return t.abrupt("return",{fail:"Did not return a valid CID instance."});case 4:return t.next=6,n.dag.get(e);case 6:if(a=t.sent.value,void 0!==a.content&&"dogs"===a.content){t.next=9;break}return t.abrupt("return",{fail:'The returned value should be the CID of the "dogs" blog post.'});case 9:if(void 0!==a.prev){t.next=11;break}return t.abrupt("return",{fail:'The "dogs" blog post needs to have a `prev` field.'});case 11:if(hn.isCID(a.prev)){t.next=13;break}return t.abrupt("return",{fail:'The value of `prev` of the "dogs" blog post needs to be a link.'});case 13:return s="zdpuAxe3g8XBLrqbp3NrjaiBLTrXjJ3SJymePGutsRRMrhAKS",r="zdpuAwwT4kGJxT7mgVZRgvmV3ke8qGNZGLuCgLhJsdBSQGM44",o="zdpuAri55PR9iW239ahcbnfkFU2TVyD5iLmqEFmwY634KZAJV",i=a.prev,t.next=19,n.dag.get(i);case 19:if(c=t.sent.value,void 0!==c.content){t.next=22;break}return t.abrupt("return",{fail:'The "dogs" blog post should link to the "computers" blog post.'});case 22:if("computers"===c.content){t.next=24;break}return t.abrupt("return",{fail:'The "dogs" blog post should link to the "computers" blog post, but it links to '.concat(c.content,".")});case 24:if(void 0!==c.prev){t.next=26;break}return t.abrupt("return",{fail:'The "computers" blog post needs to have a `prev` field.'});case 26:if(hn.isCID(c.prev)){t.next=28;break}return t.abrupt("return",{fail:'The value of `prev` of the "computers" blog post needs to be a link.'});case 28:return u=c.prev,t.next=31,n.dag.get(u);case 31:if(l=t.sent.value,void 0!==l.content){t.next=34;break}return t.abrupt("return",{fail:'The "compputers" blog post should link to the "trees" blog post.'});case 34:if("trees"===l.content){t.next=36;break}return t.abrupt("return",{fail:'The "compputers" blog post should link to the "trees" blog post, but it links to '.concat(l.content,".")});case 36:if(!("prev"in l)){t.next=38;break}return t.abrupt("return",{fail:'The "trees" blog post shouldn\'t link to other blog posts.'});case 38:if(d=u.toBaseEncodedString(),d===o){t.next=41;break}return t.abrupt("return",{fail:'The "computers" blog post should link to the "trees" blog post, but it links to '.concat(d,".")});case 41:if(p=i.toBaseEncodedString(),p===r){t.next=44;break}return t.abrupt("return",{fail:'The "dogs" blog post should link to the "computers" blog post, but it links to '.concat(p,".")});case 44:if(h=e.toBaseEncodedString(),h!==s){t.next=49;break}return t.abrupt("return",{success:"Everything works!"});case 49:return t.abrupt("return",{fail:"The returned CID ".concat(h," did not match the expected CID ").concat(s,".")});case 50:case"end":return t.stop()}},t,this)}));return function(e,n){return t.apply(this,arguments)}}(),bn={components:{Lesson:X},data:function(){return{code:fn,text:ln.a,validate:gn,exercise:pn.a}}},vn=bn,mn=Object(u["a"])(vn,on,cn,!1,null,null,null);mn.options.__file="06.vue";var xn=mn.exports,wn=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-blog-07"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,modules:t.modules,exercise:t.exercise,lessonTitle:"Traverse through all posts, starting with the most recent"}})],1)},yn=[],Cn=n("e776"),kn=n.n(Cn),_n=n("a28b"),Sn=n.n(_n),Pn=n("c2b3"),In=n("c449"),Tn='/* globals ipfs */\n\nconst traversePosts = async (cid) => {\n  // Your code goes here\n}\n\nconst run = async () => {\n  const natCid = await ipfs.dag.put({author: "Nat"})\n  const samCid = await ipfs.dag.put({author: "Sam"})\n  const treePostCid = await ipfs.dag.put({\n    content: "trees",\n    author: samCid,\n    tags: ["outdoor", "hobby"]\n  })\n  const computerPostCid = await ipfs.dag.put({\n    content: "computers",\n    author: natCid,\n    tags: ["hobby"],\n    prev: treePostCid\n  })\n  const dogPostCid = await ipfs.dag.put({\n    content: "dogs",\n    author: samCid,\n    tags: ["funny", "hobby"],\n    prev: computerPostCid\n  })\n\n  const outdoorTagCid = await ipfs.dag.put({\n    tag: "outdoor",\n    posts: [ treePostCid ]\n  })\n  const hobbyTagCid = await ipfs.dag.put({\n    tag: "hobby",\n    posts: [ treePostCid, computerPostCid, dogPostCid ]\n  })\n  const funnyTagCid = await ipfs.dag.put({\n    tag: "funny",\n    posts: [ dogPostCid ]\n  })\n\n  return traversePosts\n}\n\nreturn run',Ln=function(){var t=Object(P["a"])(regeneratorRuntime.mark(function t(e,n){var a,s,r,o,i,c,u;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if("function"===typeof e){t.next=4;break}return t.abrupt("return",{fail:"Return value needs to be a function."});case 4:return a="zdpuAxe3g8XBLrqbp3NrjaiBLTrXjJ3SJymePGutsRRMrhAKS",s="zdpuAwwT4kGJxT7mgVZRgvmV3ke8qGNZGLuCgLhJsdBSQGM44",r="zdpuAri55PR9iW239ahcbnfkFU2TVyD5iLmqEFmwY634KZAJV",t.prev=7,t.next=10,e(new In(a));case 10:if(o=t.sent,void 0!==o){t.next=13;break}return t.abrupt("return",{fail:"Your function needs to return 3 CIDs."});case 13:if(3===o.length){t.next=15;break}return t.abrupt("return",{fail:"Your function needs to return 3 CIDs."});case 15:if(i=o.every(In.isCID),i){t.next=18;break}return t.abrupt("return",{fail:"Your function needs to return CIDs"});case 18:if(c=[r,s,a],u=o.map(function(t){return t.toBaseEncodedString()}),Pn(u.sort(),c.sort())){t.next=22;break}return t.abrupt("return",{fail:"The CIDs returned by the function ".concat(Qt.stringify(u)," did not match the the expected CIDs ").concat(Qt.stringify(c),".")});case 22:t.next=27;break;case 24:return t.prev=24,t.t0=t["catch"](7),t.abrupt("return",{fail:"Your function threw an error: ".concat(t.t0,".")});case 27:return t.abrupt("return",{success:"Great job! You've completed this series of lessons!"});case 28:case"end":return t.stop()}},t,this,[[7,24]])}));return function(e,n){return t.apply(this,arguments)}}(),Dn={cids:n("c449")},En={components:{Lesson:X},data:function(){return{code:Tn,text:kn.a,validate:Ln,modules:Dn,exercise:Sn.a}}},An=En,jn=Object(u["a"])(An,wn,yn,!1,null,null,null);jn.options.__file="07.vue";var Fn=jn.exports;a["a"].use(s["a"]);var On=[{path:"/",component:k},{path:"/basics/01",component:dt},{path:"/basics/02",component:It},{path:"/basics/03",component:Nt},{path:"/blog/01",component:se},{path:"/blog/02",component:ve},{path:"/blog/03",component:Ee},{path:"/blog/04",component:Ue},{path:"/blog/05",component:rn},{path:"/blog/06",component:xn},{path:"/blog/07",component:Fn},{path:"*",name:"404"}],$n=new s["a"]({routes:On,scrollBehavior:function(t,e){return{x:0,y:0}}});a["a"].config.productionTip=!1,new a["a"]({router:$n,render:function(t){return t(d)}}).$mount("#app")},6:function(t,e){},"64a9":function(t,e,n){},"67ff":function(t,e){t.exports="In this workshop we'll be exploring the IPFS DAG API, which lets us store data\nobjects in IPFS. (You can store more exciting things in IPFS, like your favorite\ncat GIF, but you'd need to use a different API for that.)\n\nYou can create a new node by passing a data object into the `ipfs.dag.put` method,\nwhich returns a Content Identifier (CID) for the newly created node.\n\n```javascript\nipfs.dag.put({hello: 'world'})\n```\n\nA CID is an address for a block of data in IPFS that is derived from its content. Every\ntime someone puts the same `{hello: 'world'}` data into IPFS, they'll get back an\nidentical CID to the one you got. If they put in `{hell0: 'w0rld'}` instead, the\nCID will be different.\n\n_Note: Throughout our lessons we'll be using a code editor like the one below.\nEnter your solution code within the `run` function that's pre-populated for you,\nbeing sure to return the requested value within that function. (You won't need to\nupdate the `return run` line at the end; that's just there to make the code editor work.)_\n"},"6a07":function(t,e,n){"use strict";var a=n("3f6e"),s=n.n(a);s.a},7:function(t,e){},"7d14":function(t,e){t.exports="Add a new field called `tags` whose value is an array of tags. Use the tags `outdoor` and `hobby` for the blog post about trees. The blog post about computers has only a single tag called `hobby`.\n"},8:function(t,e){},8131:function(t,e,n){t.exports=n.p+"img/ipfs-illustrations-how-1.acefea6d.svg"},"81d9":function(t,e){t.exports="First, you'll need to add a link to the new blog from the node for the `hobby` tag.\n\nWe don't yet have a node for the `funny` tag. Create a new tag node that matches the format of the others and links to the blog post about dogs.\n\nReturn the CIDs of all three tag nodes as an array.\n"},8427:function(t,e,n){"use strict";var a=n("fa82"),s=n.n(a);s.a},9:function(t,e){},"979c":function(t,e){t.exports='One important feature of Directed Acyclic Graphs (DAGs) is the ability to link them together.\n\nThe way you express links in the `ipfs` DAG store is with the `CID` of\nanother node.\n\nFor example, if we wanted one node to have a link called "foo" pointed\nto another CID instance previously saved as `barCid`, it might look like:\n\n```javascript\n{\n  foo: barCid\n}\n```\nWhen we give a field a name and make its value a link to a CID, we call this a named link.  \n'},"9bda":function(t,e){t.exports="**CID** - Content Identifier. An unique address for a block of data in IPFS that is derived from its content.\n\n**DAG** - Directed Acyclic Graph. Blocks in IPFS form a graph as they can point to other blocks by their CID. These links can only point one direction (directed) and across the whole graph there are no loops or cycles (acyclic).\n"},"9ee1":function(t,e){t.exports="A single object can have many links to other nodes. To illustrate this, let's create new nodes which could be used for a tag cloud.\n\nUntil now, we've been using named links, meaning that we create a named field with a single link as its value, such as:\n\n```javascript\n{\n  author: samCid\n}\n```\nHowever, we can also choose to gather links into an array without naming each one individually.\n\n```javascript\n{ links: [\n    natCid,\n    samCid\n  ]\n}\n```\n\nThis is perfect for our use case, where a single tag should be associated with many posts, like so:\n\n```javascript\n{\n  tag: \"name-of-the-tag\",\n  posts: [\n    // links to the CIDs\n  ]\n}\n```\n\nPlease note that arrays are order-dependent. This means that two arrays with the same links in a different order will get different CIDs.\n"},a10e:function(t,e){t.exports="In the [Basics workshop](#/basics/02), we learned that a link in IPFS is represented as an instance of `CID`:\n\n```javascript\n{\n  linkToAwesomeNode: awesomeCid\n}\n```\nWhen we give a field a name and make its value a link to a CID, we call this a named link.\n\nThe exercise below has some prepared code to get us started. The data structure resembles a blog which has two authors, Nat and Sam, and some blog posts about trees and computers. At the moment thereâ€™s no relation between them. Letâ€™s update the blog posts so that they link to the author.\n"},a28b:function(t,e){t.exports="Fill in the body of the `traversePosts()` function. It takes the CID object of the most recent blog post as input. Use that to get the object from IPFS and follow the `prev` links. The return value of the function should be an array with the CID objects of all nodes (including the input CID).\n"},aef2:function(t,e,n){},ba06:function(t,e,n){t.exports=n.p+"img/complete.411ddb70.svg"},c355:function(t,e){t.exports="Create a named link called `bar` that points to the node we created in the first the lesson. Put it into IPFS and return its CID.\n\nThe editor is pre-populated with the code to create the node we're linking to.\n"},c5bb:function(t,e){t.exports="Use `ipfs.dag.put` to create a node for the data `{test: 1}`. Return the CID of your new node.\n"},cab1:function(t,e){t.exports="Use `ipfs.dag.get` to return the value of `test` by traversing the link from the object you `put` in the previous exercise."},d21f:function(t,e,n){"use strict";var a=n("aef2"),s=n.n(a);s.a},d39a:function(t,e){t.exports="You want to create an overview page that lists your blog posts chronologically.\n\nYou *could* do it the same way as we did with tags. However, you would need to update that page (create a new node) every time you added a new blog post. It sounds wasteful to create a new node with every small change.\n\nThereâ€™s a better way! Whenever you create a new blog post, you can link to the previous one directly. This enables you to walk those links to create the chronological overview page dynamically, as we'll see in the next lesson.\n\nWe know the CID of a blog post as soon as it is stored in IPFS. We can use that CID to link from newer blog posts to older ones.\n"},d4ea:function(t,e){t.exports="You can read data from deeply nested objects using path queries.\n\n```javascript\nlet cid = await ipfs.dag.put({\n  my: {\n    deep: {\n      obj: 'is cool'\n    }\n  }\n})\n\nconsole.log(await ipfs.dag.get(cid, '/my/deep/obj'))\n/* prints {value: 'is cool', remainderPath: ''} */\n```\n\n`ipfs.dag.get` allows queries using IPFS paths.\nThese queries return an object containing the value of the query and any remaining path that was unresolved.\n\nThe cool thing about this API is that it can also traverse through links.\n\n```javascript\nlet cid = await ipfs.dag.put({foo: 'bar'})\nlet cid2 = await ipfs.dag.put({\n  my: {\n    other: cid\n  }\n})\n\nconsole.log(await ipfs.dag.get(cid2, '/my/other/foo'))\n/* prints {value: 'bar', remainderPath: ''} */\n```\n"},d56b:function(t,e){t.exports="Create a new blog post which is authored by Sam, has content about `dogs`, and is tagged as `funny` and `hobby`. Return the CID of that new blog post.\n"},df39:function(t,e){t.exports="Everything that is stored in IPFS has an associated CID. That CID is constructed by hashing the data itself. If the same hash and encoding is used, then the same data will result in the same CID. However, as soon as you edit data and store it again, it will have a new CID. The old data wonâ€™t be overridden; itâ€™s still stored there with its old CID.\n\nOur blog doesn't have any tags yet. Letâ€™s modify the posts again to add some tags, watching how the CID for each post changes as we change its contents.\n\nBefore modifying the code, please open the developer tools in your browser and submit the code in its current state. Youâ€™ll see the CIDs of the blog posts in the console. When you look at the console again after youâ€™ve modified the code, youâ€™ll see that the CIDs have changed. (Notice how we use `CID.toBaseEncodedString()` to access the CID as a string for purposes of console logging.)\n"},e522:function(t,e){t.exports="In the code below, introduce a new field named `prev` in our blog posts. This field links to the previous blog post.\n\nLink the blog posts in chronological order. The oldest one is the one about trees, then thereâ€™s the one about computers. The one about `dogs` is the latest one. Once youâ€™ve updated them, return the CID of the blog post about `dogs`.\n"},e776:function(t,e){t.exports="With every blog post linked together, we can return all of them by referencing only the CID of the last. This kind of traversal could be used to create an overview page that lists all blog posts chronologically.\n\nThe `prev` field contains a link to the previous blog post. You can use that CID and the `ipfs.dag.get()` API to get the previous blog, and then use _its_ `prev` field to get the one before that. A perfect use case for a while loop!\n\nNote that the `ipfs.dag.get()` API returns an object with a `value` attribute which is the node you want and contains the original fields you saved. For example, we could find the author of the post about dogs like so:\n\n```javascript\nlet dogPostAuthor = (await ipfs.dag.get(dogPostCid)).value.author\n```\n\nNotice the parentheses used around `await ipfs.dag.get(dogPostCid)` above, since the async function needs to complete before the CID object with a property of `value` will be available. When you're using this code in practice, it's important not to make too many async calls that will create lag time.\n"},eda5:function(t,e,n){t.exports=n.p+"img/not-started.2b6ab90a.svg"},ef34:function(t,e,n){t.exports=n.p+"img/ps_logo_horiz_white.2644ca39.svg"},f211:function(t,e){t.exports="In order to make the DAG (Directed Acyclic Graph) a bit more interesting, we will add a new blog post. It follows the same structure as the existing ones.\n"},f5fb:function(t,e,n){t.exports=n.p+"img/ipfs-illustrations-how-3.334c34a9.svg"},fa82:function(t,e,n){},fccb:function(t,e,n){"use strict";var a=n("3975"),s=n.n(a);s.a}});
//# sourceMappingURL=app.e8778f76.js.map