(function(t){function e(e){for(var a,r,i=e[0],c=e[1],l=e[2],d=0,h=[];d<i.length;d++)r=i[d],o[r]&&h.push(o[r][0]),o[r]=0;for(a in c)Object.prototype.hasOwnProperty.call(c,a)&&(t[a]=c[a]);u&&u(e);while(h.length)h.shift()();return s.push.apply(s,l||[]),n()}function n(){for(var t,e=0;e<s.length;e++){for(var n=s[e],a=!0,i=1;i<n.length;i++){var c=n[i];0!==o[c]&&(a=!1)}a&&(s.splice(e--,1),t=r(r.s=n[0]))}return t}var a={},o={app:0},s=[];function r(e){if(a[e])return a[e].exports;var n=a[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=t,r.c=a,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"===typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)r.d(n,a,function(e){return t[e]}.bind(null,a));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t["default"]}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="";var i=window["webpackJsonp"]=window["webpackJsonp"]||[],c=i.push.bind(i);i.push=e,i=i.slice();for(var l=0;l<i.length;l++)e(i[l]);var u=c;s.push([1,"chunk-vendors"]),n()})({0:function(t,e){},"0344":function(t,e,n){t.exports=n.p+"img/complete.411ddb70.svg"},"034f":function(t,e,n){"use strict";var a=n("64a9"),o=n.n(a);o.a},"0693":function(t,e,n){"use strict";var a=n("c3aa"),o=n.n(a);o.a},"0856":function(t,e){t.exports="\nBefore we dig into how sharing works on the decentralized web, let's take a minute to examine how we're accustomed to accessing data.\n\n## Location addressing with URLs\n\nURLs (Uniform Resource Locators) are the primary addresses we give each other for data on the centralized web (you know, that plain old web we're all used to). They make it possible for us to create links and connect data on the web, so they serve a valuable purpose. (The web would be pretty lousy without links!) However, <strong>URLs are based on the <em>location</em> where data is stored</strong>, not on the contents of the resource stored there. We call this <strong>location addressing</strong>, and it presents us with some problems.\n\nMost of us have a lot of experience with URLs, and we make some assumptions about them based on our experience. When we see  `https://www.puppies.com/beagle.jpg`, for example, we'll probably guess from the file name and extension that\nthe data stored at that location is an image (in JPEG format) of a beagle, but we can't verify this from the URL alone. There may very well be a photo of a chihuahua hiding at `beagle.jpg`, or even worse, an adorable kitty!\n\nThrough the domain name, URLs indicate the *authority* we should ask for the data. Even though the web is already decentralized, in that anyone can link to anyone else, the location-based references we use for those links require that the data itself be centralized so that we can get it from an authority. We make assumptions about these authorities or domains as well. For example, we'd assume that a file hosted at `puppies.com` is safer to open than one hosted at `evilhacker.com`, but we can't be sure of it.\n\nAll of this uncertainty also works in reverse. If we see a picture of an adorable puppy and are told it's stored on the web, there's no way for us to guess the URL that would lead us to the image. We can neither determine the domain, which tells us who's hosting it, nor the filename.\n\n## Trust and efficiency on the centralized web\nAs you can see, since we can't verify what content resides at a particular URL and are dependent on central authorities (and human kindess) to label things as they really are, it's easy for us to get tricked.\n\nIt's also easy for 42,000 people to store exactly the same photo of an adorable beagle, all on different domains and with different filenames. Let's face it, even on our own laptops most of us have accidentally saved that save document as `download.pdf` and `download(01).pdf` without realizing it, or saved iterations of\nthe same term paper over and over again with `v1` or `2018-12-18` added to the title. The web is a confusing mess of data that's saved multiple times at different URLs, and there's no easy way to tell which items are identical to each other.\n\nThere must be a better way!\n"},"0f80":function(t,e){t.exports="**CID** - Content Identifier. An unique address for a block of data in IPFS that is derived from its content.\n"},1:function(t,e,n){t.exports=n("56d7")},10:function(t,e){},11:function(t,e){},12:function(t,e){},13:function(t,e){},1391:function(t){t.exports=[{name:"ProtoSchool San Francisco",city:"San Francisco, CA",country:"US",region:"North America",organizers:["mikeal"],repo:"http://github.com/protoschool/san-francisco"}]},14:function(t,e){},15:function(t,e){},16:function(t,e){},17:function(t,e){},18:function(t,e){},19:function(t,e){},"1d33":function(t,e){t.exports="Our new post about dogs is completely disconnected from the others. Let's update the nodes that represent the tag cloud.\n"},"1fc4":function(t,e,n){t.exports=n.p+"img/ps_symbol_color.0e817003.svg"},2:function(t,e){},20:function(t,e){},21:function(t,e){},22:function(t,e){},2223:function(t,e){t.exports="\nSo far we've exclusively been discussing adorable images for the sake of our general\nmerriment, but content addressing can be used on all different types of files and data,\nfrom JSON objects to term papers to videos. For cryptographic hashing to work, we need\nto know what data format we're working with and use an appropriate tool.\n\n## Decoding data structures\n\nA `CID` is a particular form of content addressing. It's a specification developed for\nIPFS, a specific decentralized web protocol that we'll discuss in later tutorials,\nbut it has very broad implications.\n\nA `CID` is a single identifier that contains a cryptographic hash **and**\ninformation about how to interpret that data called a \"codec.\" Codecs encode and\ndecode data in certain formats.\n\n```\n+-------+------------------------------+\n| Codec | Multihash                    |\n+-------+------------------------------+\n```\n\nMany formats and protocols use content addressing. `CID` allows us to create a universal identifier for any of these systems. Tools like git and protocols like Ethereum and Bitcoin all use content addressing already, but they differ in how to interpret the data and what cryptographic function they use for hashing.\n\nA `CID` is an identifier that contains the `codec` to interpret the data and a `multihash` which is a self-desribing hash (a hash that tells you what type of hashing function was used to create it).\n\n```\n+------------------------------+\n|Codec                         |\n+------------------------------+\n|Multihash                     |\n| +----------+---------------+ |\n| |Hash Type | Hash Value    | |\n| +----------+---------------+ |\n|                              |\n+------------------------------+\n```\n\n## Linking between different data structures\n\n`CID`s allow us to build data structures that link to other data structures\nin completely different formats. Imagine a tree of JSON objects that link\nto BSON objects that also link to git commits. (Or imagine a file folder containing\npuppy images <em>and</em> kitty videos, with a subfolder containing articles on\ngiraffes. The possiblities are endless!) All the way down this tree we\nhave cryptographic hashes that allow us to distribute and link the data.\n\nWhy is it important to link between different data structures? Every day on the centralized web,\nwe link from text to images, from logos to homepages, and from emails to PDFs.\nLinks tie resources together, convey meaning, and make the web awesomely interactive!\n"},23:function(t,e){},24:function(t,e){},3:function(t,e){},"358a":function(t,e){t.exports="Modify the two existing blog posts by adding a new field `author` that links to the author of each post. The post about trees was authored by Sam, while Nat wrote the post about computers.\n"},"39aa":function(t,e){t.exports='Create new nodes for the tags "outdoor" and "hobby" in the format shown above, linking to the relevant blog posts using arrays. Insert the new tag objects into IPFS via `ipfs.dag.put()` and return the two resulting CIDs as an array.\n'},"3e61":function(t,e){t.exports="\nAs we've discussed, the decentralized web depends on linked data structures. Let's explore\nwhat those look like.\n\n## Merkle trees\nA merkle tree, or simple \"hash tree,\" is a tree data structure in which every node is hashed.\n\n```\n               +--------+\n               |        |\n     +---------+  root  +---------+\n     |         |        |         |\n     |         +----+---+         |\n     |              |             |\n+----v-----+  +-----v----+  +-----v----+\n|          |  |          |  |          |\n|  node A  |  |  node B  |  |  node C  |\n|          |  |          |  |          |\n+----------+  +-----+----+  +-----+----+\n                    |             |\n              +-----v----+  +-----v----+\n              |          |  |          |\n              |  node D  |  |  node E  +-------+\n              |          |  |          |       |\n              +----------+  +-----+----+       |\n                                  |            |\n                            +-----v----+  +----v-----+\n                            |          |  |          |\n                            |  node F  |  |  node G  |\n                            |          |  |          |\n                            +----------+  +----------+\n```\n\nIn a merkle tree, nodes point to other nodes by content address (hash). Remember,\nwhen we run data through a cryptographic hash, we get back a \"hash\" or \"content address\"\nthat we can think of as a link, so a merkle tree is a collection of linked nodes.\n\nAs previously discussed, all content addresses are unique. In the graph above, `node E` contains a reference to the hash for `node F` and `node G`.\nThis means that the content address (hash) of `node E` is unique to a node containing those addresses.\n\nGetting lost? Let's imagine this as a set of file folders. If we run folder E through our hashing algorithm\nwhile it contains subfolders F and G, the content-derived hash we get back is unique to its current content.\nIf we remove folder G, it's like Grace removing that whisker from her kitten photo. The folder formerly known as E doesn't\nhave the same contents anymore, so it gets a new hash.\n\nAs the tree above is built, the final content address (hash) of the root node is unique to a\ntree that contains every node all the way down this tree. If the data in any node were\nto change even by a single byte, the hash of the changed node would change, as would the hashes\nof all of its parent nodes.\n\nIn case you haven't noticed, this means that as a programmer you'll always need to build\nthese data structures backwards, from the leaf nodes on up to the root node.\n\n## Directed Acyclic Graphs (DAG)\n\n![img](https://upload.wikimedia.org/wikipedia/commons/c/c6/Topological_Ordering.svg)\n\nDAG is an acronym for \"Directed Acyclic Graph.\" It's a fancy way of describing a\nspecific kind of merkle tree (hash tree) where different branches in the tree can point at other branches\nin the tree in a single forward direction, as illustrated by the image above.\n"},"3f6e":function(t,e,n){},4:function(t,e){},"4bad":function(t,e){t.exports="As we've seen, the centralized web relies on central authorities\nto host our data and uses URLs as addresses to access it. But location\naddressing isn't the only option. On the\n<strong>decentralized web</strong>, we can all host each other's data,\nand there's a different kind of linking that's more secure, making it easy to\ntrust our neighbors.\n\n## Crytographic hashing\n\n<strong>[Cryptographic hashing](https://en.wikipedia.org/wiki/Cryptographic_hash_function)</strong> is the\nmost important tool in the toolbox of decentralized data structures. It opens the door to a new form of linking, known as <strong>content\naddressing</strong>, that we can use in a decentralized environment without central authorities.\n\nHashing takes data of any size and returns you a single fixed-size \"hash\" for that data.\nA hash is a string of characters that looks like gobbledygook, but you can think of it\nas a name for the data. It might look something like this:\n\n`zdpuAsHkamdCQgrDrNSwJVgjMkQWoLxdrccxV6qe9htipNein`\n\nTo be honest, these content-derived names aren't currently very friendly to humans\n(`beagle.jpg` was so much more descriptive!), but they're a lot more secure. Here's why:\n\n<strong>Cryptographic hashes can be derived from the content of the data itself</strong>,\nmeaning that anyone using the same\nalgorithm on the same data will arrive at the same hash. If Ada and Grace\nare both using the same decentralized web protocol, such as IPFS, to share the exact\nsame photo of a kitten, both images will have exactly the same hash. By comparing\nthose hashes and confirming they're identical, we can guarantee that every single pixel\nof those two photos is identical.\n\n<strong>Cryptographic hashes are also unique</strong>. That means that if Grace uses Photoshop to remove a\nsingle whisker from that kitty, the updated image will have a new hash, and it will\nbe easy to tell &mdash; just from the hash, without access to the file itself &mdash; that it\ncontains different data.\n\n## Trust on the decentralized web\n\nOn the centralized web, we've learned to trust certain authorities and not others. We do our best\nwith the clues we have from URLs, but there are some malicious actors who use the shortcomings of location\naddressing to trick us.\n\nOn the decentralized web, where we're all able to pitch in and host each other's data, we may not\nknow much about the <em>peers</em> who are hosting data, but content addressing gives us a way to trust\nthe data that they're sharing. With content addressing, we can't be fooled by malicious actors into\naccessing the wrong data. That's what makes cryptographic hashing so important to the decentralized web.\n\n## Asking peers for content\n\nWith traditional location addressing, we knew we needed to visit the domain `puppies.com` to find the\ncontent stored as `beagle.jpg`. If the `puppies.com` domain were broken for some reason, we'd lose\naccess to that image.\n\nThe decentralized web works differently. When we want a specific photo of an adorable pet, we ask for it\nby its content address (hash). Who do we ask? The whole network! If Ada is online, we'll see that she has\nthe content we're looking for, which we can verify as being exactly what we're looking for because it has\na matching hash. If she goes offline, we may still be able to get the same photo from Grace or another peer.\n\nSince we use hashes to request data on the decentralized web, we can think of a hash as a link, not just a name.\n"},5:function(t,e){},"56d7":function(t,e,n){"use strict";n.r(e);n("cadf"),n("551c"),n("097d"),n("da13"),n("5680");var a=n("2b0e"),o=n("8c4f"),s=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{attrs:{id:"app"}},[n("router-view")],1)},r=[],i={name:"app"},c=i,l=(n("034f"),n("2877")),u=Object(l["a"])(c,s,r,!1,null,null,null);u.options.__file="App.vue";var d=u.exports,h=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[n("Header",{attrs:{current:"Home"}}),n("div",[n("section",{staticClass:"mw7 center ph2"},[n("h1",{staticClass:"mt5"},[t._v("Interactive Tutorials")]),n("p",{staticClass:"f4 fw5 lh-copy ma0 pv3  "},[t._v("\n      Our self-guided interactive tutorials are designed to introduce you to\n      decentralized web concepts, protocols, and tools. Complete code\n      challenges right in your web browser and track your progress as you go.\n      ")]),n("div",{staticClass:"mv3"},[n("router-link",{staticClass:"f5 link dim br-pill ph3 pv2 mb2 dib white bg-navy mr3",attrs:{to:"/tutorials"}},[t._v("View All Tutorials")]),n("router-link",{staticClass:"f5 link dim br-pill ph3 pv2 mb2 dib white bg-navy",attrs:{to:"/build"}},[t._v("Build a Tutorial")])],1),n("h2",[t._v("Featured Tutorials")]),n("div",{staticClass:"flex flex-wrap justify-between",attrs:{id:"featured"}},[n("div",{staticClass:"bg-aqua br4 pa3 mb3 tutorial-tile"},[n("router-link",{attrs:{to:"/data-structures/01"}},[n("h3",{staticClass:"ma0 f3 fw7 navy"},[t._v("Decentralized Data Structures")]),n("p",{staticClass:"f5 fw5 ma0 pt2 lh-copy white"},[t._v("\n              The decentralized web relies on unique data structures and linking strategies. Learn about the benefits of hashing, content addressing, DAG and Merkle Trees!\n            ")])])],1),n("div",{staticClass:"bg-aqua br4 pa3 mb3 tutorial-tile"},[n("router-link",{attrs:{to:"/basics/01"}},[n("h3",{staticClass:"ma0 f3 fw7 navy"},[t._v("P2P data links with content addressing")]),n("p",{staticClass:"f5 fw5 ma0 pt2 lh-copy white"},[t._v("\n              Store, fetch, and create verifiable links between peer-hosted datasets with IPFS and CIDs. It’s graphs with friends!\n            ")])])],1),n("div",{staticClass:"bg-aqua br4 pa3 mb3 tutorial-tile"},[n("router-link",{attrs:{to:"/blog/01"}},[n("h3",{staticClass:"ma0 f3 fwy navy"},[t._v("Blogging on the Decentralized Web")]),n("p",{staticClass:"f5 fw5 ma0 pt2 lh-copy white"},[t._v("\n              Cool content addresses don't change.\n            ")])])],1)]),n("h1",[t._v("Chapter Events")]),n("p",{staticClass:"f4 fw5 lh-copy ma0 pv3  "},[t._v("\n      Chapters around the world host in-person events using our tutorials as\n      curriculum, with mentors available to help you work through the challenges.\n      ")]),n("div",{staticClass:"mv3"},[n("router-link",{staticClass:"f5 link dim br-pill ph3 pv2 mb2 dib white bg-navy mr3",attrs:{to:"/chapters"}},[t._v("Find a Chapter Near You")]),n("router-link",{staticClass:"f5 link dim br-pill ph3 pv2 mb2 dib white bg-navy",attrs:{to:"/host"}},[t._v("Start Your Own")])],1)])])],1)},p=[],f=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"home"},[n("header",[t._m(0),n("Navigation")],1)])},g=[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("section",{staticClass:"flex items-center bg-navy white pv3"},[a("div",{staticClass:"flex-auto"},[a("div",{staticClass:"pseudo-logo center mw7"},[a("a",{attrs:{href:"/"}},[a("img",{staticClass:"mr3",attrs:{src:n("1fc4"),alt:"ProtoSchool"}})]),a("div",{staticClass:"header-text"},[a("h1",{staticClass:"ma0 fw4"},[a("span",{staticClass:"montserrat fw4"},[t._v("Proto")]),a("span",{staticClass:"montserrat fw2"},[t._v("School")])]),a("h2",{staticClass:"ma0 montserrat fw3"},[t._v("\n              Interactive tutorials on decentralized web protocols\n            ")])])])])])}],b=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"bg-aqua w-100"},[t.isLesson?n("nav",{staticClass:"flex items-center bg-aqua navy pv3 center tc mw7"},[n("router-link",{staticClass:"nav-link navy",attrs:{to:"/"}},[t._v("Home")]),t._v(" >\n      "),n("router-link",{staticClass:"nav-link navy",attrs:{to:"/tutorials"}},[t._v("Tutorials")]),t._v(" >\n      "),n("span",{staticClass:"fake-nav-link"},[t._v(t._s(t.workshopShortname))])],1):n("nav",{staticClass:"flex items-center bg-aqua white pv3 center tc mw7"},t._l(t.links,function(e){return n("div",[e.path===t.$route.path?n("router-link",{staticClass:"nav-link white",attrs:{to:""+e.path}},[t._v(t._s(e.text))]):n("router-link",{staticClass:"nav-link navy",attrs:{to:""+e.path}},[t._v(t._s(e.text))])],1)}))])},v=[],m=(n("ac6a"),n("28a5"),n("6b54"),{name:"Navigation",data:function(t){return{currentPath:t.$route.path.toString(),workshopShortname:(t.$route.path.charAt(1).toUpperCase()+t.$route.path.slice(2,t.$route.path.lastIndexOf("/"))).split("-").join(" "),links:[{text:"Home",path:"/"},{text:"Tutorials",path:"/tutorials"},{text:"Chapters",path:"/chapters"},{text:"Contribute",path:"/contribute"},{text:"Host",path:"/host"},{text:"Build",path:"/build"}]}},computed:{isLesson:function(){var t=this,e=0;return this.links.forEach(function(n){n.path===t.currentPath&&e++}),0===e}}}),w=m,y=(n("9952"),Object(l["a"])(w,b,v,!1,null,"21ef146c",null));y.options.__file="Navigation.vue";var k=y.exports,x={name:"Header",components:{Navigation:k}},C=x,_=(n("8439"),Object(l["a"])(C,f,g,!1,null,"61f08340",null));_.options.__file="Header.vue";var S=_.exports,P={name:"home",components:{Header:S}},I=P,T=(n("8636"),Object(l["a"])(I,h,p,!1,null,"61f60c10",null));T.options.__file="Home.vue";var L=T.exports,D=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[n("Header"),n("div",{staticClass:"home"},[n("section",{staticClass:"mw7 center ph2"},[n("h1",{staticClass:"mt5"},[t._v("ProtoSchool Chapters")]),n("p",{staticClass:"f4 fw5 lh-copy ma0 pv4  "},[t._v("\n        Cities all over host ProtoSchool events regularly, offering you the\n        opportunity to complete our interactive tutorials with the support of\n        local mentors. Select a chapter below to learn more.\n      ")]),n("ul",t._l(t.regions,function(e){return n("li",[n("h2",[t._v(t._s(e))]),n("ul",t._l(t.chaptersByRegion[e],function(e){return n("li",[e.website?n("span",[n("a",{staticClass:"f5 link dim br-pill ph3 pv2 mb2 dib white bg-navy mr3",attrs:{href:e.website}},[t._v(t._s(e.city)+", "+t._s(e.country))])]):e.repo?n("span",[n("a",{staticClass:"f5 link dim br-pill ph3 pv2 mb2 dib white bg-navy mr3",attrs:{href:e.repo}},[t._v(t._s(e.city)+", "+t._s(e.country))])]):n("span",[n("span",{staticClass:"f5 br-pill ph3 pv2 mb2 dib white bg-navy mr3"},[t._v(t._s(e.city)+", "+t._s(e.country))])])])}))])})),n("p",{staticClass:"f4 fw5 lh-copy ma0 pv4  "},[t._v("\n        Can't find a chapter near you? "),n("router-link",{attrs:{to:"/host"}},[t._v("Start your own")]),t._v("!\n      ")],1)])])],1)},E=[],A=(n("55dd"),n("6762"),n("1391")),j={name:"Tutorials",components:{Header:S},data:function(t){return{chapters:A}},computed:{chaptersByRegion:function(){var t=[],e={};for(var n in this.chapters.forEach(function(n){t.includes(n.region)?e[n.region].push(n):(t.push(n.region),e[n.region]=[n])}),e)e[n].sort(function(t,e){return t.city.localeCompare(e.city)});return e},regions:function(){var t=[];return this.chapters.forEach(function(e){t.includes(e.region)||t.push(e.region)}),t.sort()}}},z=j,O=(n("b486"),Object(l["a"])(z,D,E,!1,null,"4dcf2ba9",null));O.options.__file="Chapters.vue";var $=O.exports,F=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[n("Header"),n("div",{staticClass:"home"},[n("section",{staticClass:"mw7 center ph2"},[n("h1",{staticClass:"mt5"},[t._v("Organize Chapter Events")]),n("p",{staticClass:"f4 fw5 lh-copy ma0 pv3  "},[t._v("\n      ProtoSchool is a community-driven effort and is 100% open source. This\n      means that anyone can use the ProtoSchool materials and/or host an event.\n      ")]),n("p"),n("p",{staticClass:"f4 fw5 lh-copy ma0 pv3  "},[t._v("\n      Events are run independently by local "),n("router-link",{attrs:{to:"/chapters"}},[t._v("\n      ProtoSchool chapters")]),t._v(' around the world, but we ask that all\n      events be not-for-profit (free or low-cost) and that governance of events\n      have an open membership model (so that nobody can "control" the events).\n      ')],1),n("p"),n("p",{staticClass:"f4 fw5 lh-copy ma0 pv3  "},[t._v("\n      ProtoSchool chapters also have an online presence to keep local\n      communities interacting between events. Each chapter has its own\n      GitHub repo within our organization, which makes it easy to manage a\n      discussion board using GitHub issues and host a chapter website on our\n      domain using GitHub Pages.\n      ")]),n("p"),t._m(0),n("h2",{},[t._v("Other ways to contribute")]),n("p",{staticClass:"f4 fw5 lh-copy ma0 pv3  "},[t._v("\n      Not ready to host a chapter quite yet? We'd love your help\n      "),n("router-link",{attrs:{to:"/build"}},[t._v("building new tutorials")]),t._v(",\n      improving existing ones, answering technical questions, or\n      making our documentation more clear.\n      Learn more about the many\n      "),n("a",{attrs:{href:"https://github.com/ProtoSchool/organizing/blob/master/CONTRIBUTING.md#ways-to-contribute"}},[t._v("\n      ways to contribute")]),t._v(".\n      ")],1)])])],1)},B=[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",{staticClass:"f4 fw5 lh-copy ma0 pv3  "},[t._v("\n      Check out our "),n("a",{attrs:{href:"https://github.com/protoschool/organizing"}},[t._v("\n      Organizing repo")]),t._v(" for info on how to create a chapter, run a\n      successful event, and build a local ProtoSchool community!\n      ")])}],N={name:"Host",components:{Header:S}},q=N,R=Object(l["a"])(q,F,B,!1,null,null,null);R.options.__file="Host.vue";var W=R.exports,G=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[n("Header"),t._m(0)],1)},M=[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"home"},[n("section",{staticClass:"mw7 center ph2"},[n("h1",{staticClass:"mt5"},[t._v("Build an Interactive Tutorial")]),n("p",{staticClass:"f4 fw5 lh-copy ma0 pv3  "},[t._v("\n      We're excited to add new tuorials to our collection, and we'd love your\n      help brainstorming and building new content about decentralized web\n      concepts and protocols.\n      ")]),n("p",{staticClass:"f4 fw5 lh-copy ma0 pv3  "},[t._v("\n      ProtoSchool is a community-driven effort, and we\n      rely on contributors like you to create great educational content!\n      ")]),n("h2",[t._v("Share a tutorial idea")]),n("p",{staticClass:"f4 fw5 lh-copy ma0 pv3  "},[t._v("\n      Have an idea for a new tutorial? Start by looking at the\n      "),n("a",{attrs:{href:"https://github.com/protoschool/protoschool.github.io/labels/new%20tutorial"}},[t._v("\n      tutorial ideas")]),t._v(' flagged with the "new tutorial"\n      tag in the ProtoSchool issue queue. If there\'s a similar idea there\n      already, join the conversation!\n      ')]),n("p",{staticClass:"f4 fw5 lh-copy ma0 pv3  "},[t._v("\n      If you have an idea for a new tutorial that has not yet been proposed,\n      please "),n("a",{attrs:{href:"https://github.com/ProtoSchool/protoschool.github.io/issues/new?assignees=&labels=new-tutorial&template=tutorial-proposal.md&title=New+Tutorial%3A+%5BProposed+title%5D"}},[t._v("\n      open an new issue")]),t._v(" so we can share feedback before you get started\n      building.\n      ")]),n("p",{staticClass:"f4 fw5 lh-copy ma0 pv3  "},[t._v("\n      Don't feel like you have the skills to build a tutorial yourself?\n      Please still go ahead and share your idea!\n      ")]),n("h2",[t._v("Build a tutorial")]),n("p",{staticClass:"f4 fw5 lh-copy ma0 pv3  "},[t._v("\n      Whether you've shared your own tutorial idea or found an\n      "),n("a",{attrs:{href:"https://github.com/protoschool/protoschool.github.io/labels/new%20workshop"}},[t._v("\n      existing proposal")]),t._v(" you're excited about, we'd love to have your help\n      building it.\n      ")]),n("p",{staticClass:"f4 fw5 lh-copy ma0 pv3  "},[t._v("\n      ProtoSchool tutorials are built using "),n("a",{attrs:{href:"https://cli.vuejs.org/"}},[t._v("\n      Vue CLI 3")]),t._v(" with single-file components and use an embedded\n      "),n("a",{attrs:{href:"https://www.npmjs.com/package/monaco-editor"}},[t._v("Monaco Editor")]),t._v("\n      to enable interactive code challenges. Check out our\n      "),n("a",{attrs:{href:"https://github.com/ProtoSchool/protoschool.github.io/blob/code/README.md#developing-lessons"}},[t._v("\n      instructions for developing tutorials")]),t._v(" to see how the pieces fit together.\n      ")]),n("p",{staticClass:"f4 fw5 lh-copy ma0 pv3  "},[t._v("\n      If the type of lesson you're\n      hoping to create isn't supported by the current lesson structure,\n      please "),n("a",{attrs:{href:"https://github.com/ProtoSchool/protoschool.github.io/issues/new?assignees=&labels=new-tutorial&template=tutorial-proposal.md&title=New+Tutorial%3A+%5BProposed+title%5D"}},[t._v("\n      open an issue")]),t._v(" and tell us more about the format you have in mind.\n      ")]),n("h2",[t._v("Other ways to contribute")]),n("p",{staticClass:"f4 fw5 lh-copy ma0 pv3  "},[t._v("\n      Not ready to build a tutorial quite yet? We'd love your help improving\n      existing tutorials, answering technical questions, making our\n      documentation more clear, or leading a local ProtoSchool chapter.\n      Learn more about the many\n      "),n("a",{attrs:{href:"https://github.com/ProtoSchool/organizing/blob/master/CONTRIBUTING.md#ways-to-contribute"}},[t._v("\n      ways to contribute")]),t._v(".\n      ")])])])}],U={name:"Build",components:{Header:S}},H=U,Y=Object(l["a"])(H,G,M,!1,null,null,null);Y.options.__file="Build.vue";var J=Y.exports,K=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[n("Header"),n("div",[n("section",{staticClass:"mw7 center ph2"},[n("h1",{staticClass:"mt5"},[t._v("Contribute to the Community")]),t._m(0),n("h2",[t._v("Interactive Tutorials")]),n("p",{staticClass:"f4 fw5 lh-copy ma0 pv3"},[t._v("\n      Our "),n("router-link",{attrs:{to:"/tutorials"}},[t._v("interactive tutorials")]),t._v(" are\n      the heart of our educational mission. Each browser-based tutorial\n      consists of lessons of increasing difficulty, in which a new\n      concept is explained and the learner is given a code challenge\n      to solve to apply their learning. The learner submits their solution\n      when ready, and receives contextual feedback if needed to try again.\n      If their code passes, they move on to the next lesson in the tutorial.\n      ")],1),n("p",{staticClass:"f4 fw5 lh-copy ma0 pv3 "},[t._v("\n      For contributors "),n("router-link",{attrs:{to:"/build"}},[t._v("building new tutorials,")]),t._v("\n      the process feels similar to creating a unit test suite\n      which the learner must pass by implementing the correct code.\n      ")],1),n("h2",[t._v("Topics")]),t._m(1),n("h2",[t._v("Chapter Events")]),n("p",{staticClass:"f4 fw5 lh-copy ma0 pv3 "},[t._v("\n      Community events around the world provide an opportunity for learners\n      to explore ProtoSchool tutorials with guidance from mentors in their\n      "),n("router-link",{attrs:{to:"/chapters"}},[t._v("local chapters")]),t._v(". Anyone can\n      "),n("router-link",{attrs:{to:"/host"}},[t._v("host a ProtoSchool chapter")]),t._v(", and we\n      provide tools and tips for managing local chapters and organizing events\n      that are fun and welcoming for everyone.\n      ")],1),n("h2",[t._v("Contributing")]),n("p",{staticClass:"f4 fw5 lh-copy ma0 pv3 "},[t._v("\n      ProtoSchool is a community-driven effort, and we depend on contributors\n      to "),n("router-link",{attrs:{to:"/host"}},[t._v("build tutorials")]),t._v(",\n      "),n("router-link",{attrs:{to:"/host"}},[t._v("organize chapter events")]),t._v(",\n      improve our existing tutorials and documentation, and answer community\n      questions. Learn more about\n      "),n("a",{attrs:{href:"https://github.com/ProtoSchool/organizing/blob/master/CONTRIBUTING.md",target:"blank"}},[t._v("\n      ways to contribute")]),t._v(".\n      ")],1),n("h2",[t._v("Get in Touch")]),t._m(2),n("h2",[t._v("Code of Conduct")]),t._m(3),n("p",{staticClass:"f4 fw5 lh-copy ma0 pv3 "},[t._v("\n      Additionally, each ProtoSchool chapter is responsible for maintaining\n      their own Code of Conduct for chapter events and repos. If you have questions about the\n      Code of Conduct for a specific chapter, you can open an issue in their\n      associated GitHub repository.\n      ")])])])],1)},V=[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",{staticClass:"f4 fw5 lh-copy ma0 pv3"},[t._v("\n      ProtoSchool is a community-driven open source project dedicated to\n      making it easy to get started with decentralized web technologies.\n      We accomplish this by "),n("strong",[t._v("creating interactive tutorials")]),t._v("\n      and "),n("strong",[t._v("hosting community learning events")]),t._v(".\n      ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",{staticClass:"f4 fw5 lh-copy ma0 pv3 "},[t._v("\n      ProtoSchool content is designed to introduce learners to the concepts,\n      protocols, and tools that support the decentralized web. We're excited\n      to add new tutorials to our collection, and we'd love your help building\n      content about projects such as\n      "),n("a",{attrs:{href:"https://ipfs.io/",target:"blank"}},[t._v("IPFS")]),t._v(",\n      "),n("a",{attrs:{href:"https://ipld.io/",target:"blank"}},[t._v("IPLD")]),t._v(",\n      "),n("a",{attrs:{href:"https://libp2p.io/",target:"blank"}},[t._v("libp2p")]),t._v(",\n      "),n("a",{attrs:{href:"https://multiformats.io/",target:"blank"}},[t._v("Multiformats")]),t._v(",\n      and more.\n      ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",{staticClass:"f4 fw5 lh-copy ma0 pv3 "},[t._v("\n      We use GitHub to organize ProtoSchool. The best place to get in touch\n      with questions about chapter leadership and community engagement is our\n      "),n("a",{attrs:{href:"https://github.com/ProtoSchool/organizing",target:"blank"}},[t._v("organizing\n      repository")]),t._v(", where you can open a new issue and organizers will be\n      notified and respond. If you have a new tutorial idea or suggestions for\n      improving the ProtoSchool site, please open an issue in the\n      "),n("a",{attrs:{href:"https://github.com/ProtoSchool/protoschool.github.io",target:"blank"}},[t._v("\n      website repository")]),t._v(".\n      ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",{staticClass:"f4 fw5 lh-copy ma0 pv3 "},[t._v("\n      We strive to make ProtoSchool a welcoming place for all community members.\n      All community members, including chapter organizers, must abide by the\n      "),n("a",{attrs:{href:"https://github.com/protoschool/organizing/blob/master/CODE_OF_CONDUCT.md"}},[t._v("\n      Code of Conduct")]),t._v(" outlined in our organizing repository.\n      ")])}],Q={name:"Community",components:{Header:S}},Z=Q,X=Object(l["a"])(Z,K,V,!1,null,null,null);X.options.__file="Contribute.vue";var tt=X.exports,et=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[n("Header"),n("div",{staticClass:"home"},[t._m(0),n("section",{staticClass:"db mw7 center ph2"},[n("div",{staticClass:"flex items-start pv4"},[t._m(1),n("div",{staticClass:"w-100"},[n("h2",{staticClass:"ma0 f3 fw5"},[n("router-link",{attrs:{to:"/data-structures/01"}},[t._v("Decentralized data structures")])],1),n("p",{staticClass:"f5 fw5 ma0 pt2 lh-copy charcoal-muted"},[t._v("\n            The decentralized web relies on unique data structures and linking strategies. Learn about the benefits of hashing, content addressing, DAG and Merkle Trees!\n          ")]),n("ul",{staticClass:"mv4 pa0 f5",staticStyle:{"list-style-type":"none",background:"rgba(11, 58, 82, 5%)"}},[n("li",[n("ExerciseLink",{attrs:{to:"/data-structures/01",index:"1",name:"Data structures"}})],1),n("li",[n("ExerciseLink",{attrs:{to:"/data-structures/02",index:"2",name:"The centralized web: Location-based addressing"}})],1),n("li",[n("ExerciseLink",{attrs:{to:"/data-structures/03",index:"3",name:"The decentralized web: Content addressing"}})],1),n("li",[n("ExerciseLink",{attrs:{to:"/data-structures/04",index:"4",name:"Cryptographic hashing and Content Identifiers (CIDs)"}})],1),n("li",[n("ExerciseLink",{attrs:{to:"/data-structures/05",index:"5",name:"Merkle trees and directed acyclic graphs (DAG)"}})],1)])])])]),n("section",{staticClass:"db mw7 center ph2"},[n("div",{staticClass:"flex items-start pv4"},[t._m(2),n("div",{staticClass:"w-100"},[n("h2",{staticClass:"ma0 f3 fw5"},[n("router-link",{attrs:{to:"/basics/01"}},[t._v("P2P data links with content addressing")])],1),n("p",{staticClass:"f5 fw5 ma0 pt2 lh-copy charcoal-muted"},[t._v("\n            Store, fetch, and create verifiable links between peer-hosted datasets with IPFS and CIDs. It’s graphs with friends!\n          ")]),n("ul",{staticClass:"mv4 pa0 f5",staticStyle:{"list-style-type":"none",background:"rgba(11, 58, 82, 5%)"}},[n("li",[n("ExerciseLink",{attrs:{to:"/basics/01",index:"1",name:"Create a node and return a Content Identifier (CID)"}})],1),n("li",[n("ExerciseLink",{attrs:{to:"/basics/02",index:"2",name:"Create a new node that's linked to an old one"}})],1),n("li",[n("ExerciseLink",{attrs:{to:"/basics/03",index:"3",name:"Read nested data using links"}})],1)])])])]),n("section",{staticClass:"db mw7 center ph2"},[n("div",{staticClass:"flex items-start pv4"},[t._m(3),n("div",{staticClass:"w-100"},[n("h2",{staticClass:"ma0 f3 fw5 "},[n("router-link",{attrs:{to:"/blog/01"}},[t._v("Blogging on the Decentralized Web")])],1),n("p",{staticClass:"f5 fw5 ma0 pt2 lh-copy charcoal-muted"},[t._v("\n            Cool content addresses don't change.\n          ")]),n("ul",{staticClass:"mv4 pa0 f5",staticStyle:{"list-style-type":"none",background:"rgba(11, 58, 82, 5%)"}},[n("li",[n("ExerciseLink",{attrs:{to:"/blog/01",index:"1",name:"Link an author to a blog post using its CID"}})],1),n("li",[n("ExerciseLink",{attrs:{to:"/blog/02",index:"2",name:"Update posts with tags and watch their CIDs change"}})],1),n("li",[n("ExerciseLink",{attrs:{to:"/blog/03",index:"3",name:"Build a tag cloud with arrays of links"}})],1),n("li",[n("ExerciseLink",{attrs:{to:"/blog/04",index:"4",name:"Add a new blog post linked to an author and tags"}})],1),n("li",[n("ExerciseLink",{attrs:{to:"/blog/05",index:"5",name:"Add a new tag linked to multiple blog posts"}})],1),n("li",[n("ExerciseLink",{attrs:{to:"/blog/06",index:"6",name:"List posts chronologically with a chain of links"}})],1),n("li",[n("ExerciseLink",{attrs:{to:"/blog/07",index:"7",name:"Traverse through all posts, starting with the most recent"}})],1)])])])])])],1)},nt=[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("section",{staticClass:"db"},[n("h1",{staticClass:"mw7 center ph2 mt5"},[t._v("Interactive Tutorials")]),n("p",{staticClass:"f4 fw5 lh-copy ma0 pv4 mw7 center ph2"},[t._v("\n        Our interactive tutorials help you learn about the\n        the decentralized web by writing code and solving challenges.\n      ")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"project-label flex-none tc"},[a("h1",{staticClass:"ma0 f3 fw6 pb2"},[t._v("IPFS")]),a("img",{staticStyle:{height:"54px"},attrs:{src:n("9bda"),alt:""}})])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"project-label flex-none tc"},[a("h1",{staticClass:"ma0 f3 fw6 pb2"},[t._v("IPFS")]),a("img",{staticStyle:{height:"54px"},attrs:{src:n("9bda"),alt:""}})])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"project-label flex-none tc"},[a("h1",{staticClass:"ma0 f3 fw6 pb2"},[t._v("IPFS")]),a("img",{staticStyle:{height:"54px"},attrs:{src:n("9bda"),alt:""}})])}],at=(n("f559"),n("456d"),function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("router-link",{staticClass:"link db pa3 bb b--white green hover-bg-washed-yellow",attrs:{to:t.to}},[a("div",{staticClass:"flex"},[a("div",{staticClass:"green ttu f6",staticStyle:{"min-width":"72px"}},[t._v("Lesson "+t._s(t.index))]),a("div",{staticClass:"pr2"},[t.lessonPassed("passed"+t.to)?a("img",{staticStyle:{height:"1rem"},attrs:{src:n("0344"),alt:"complete"}}):t.lessonCached("cached"+t.to)?a("img",{staticStyle:{height:"1rem"},attrs:{src:n("d0c2"),alt:"complete"}}):a("img",{staticStyle:{height:"1rem"},attrs:{src:n("acc3"),alt:"not yet started"}})]),a("div",{staticClass:"navy fw5 mw6"},[t._v(t._s(t.name))])])])}),ot=[],st={name:"ExerciseLink",props:["to","index","name"],methods:{lessonPassed:function(t){return!!localStorage[t]},lessonCached:function(t){return!!localStorage[t]}}},rt=st,it=Object(l["a"])(rt,at,ot,!1,null,null,null);it.options.__file="ExerciseLink.vue";var ct=it.exports,lt={name:"Tutorials",components:{ExerciseLink:ct,Header:S},data:function(t){return{firstWorkshopVisit:!0}},mounted:function(){this.checkFirstWorkshopVisit()},methods:{checkFirstWorkshopVisit:function(){for(var t=Object.keys(localStorage),e=0;e<t.length;e++){var n=t[e];if(n.startsWith("passed")||n.startsWith("cached"))return void(this.firstWorkshopVisit=!1)}this.firstWorkshopVisit=!0}}},ut=lt,dt=(n("d4a8"),Object(l["a"])(ut,et,nt,!1,null,"3672002b",null));dt.options.__file="Tutorials.vue";var ht=dt.exports,pt=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-01"},[n("Lesson",{attrs:{text:t.text,validate:t.validate,exercise:t.exercise,concepts:t.concepts,lessonTitle:"Create a node and return a Content Identifier (CID)"}})],1)},ft=[],gt=(n("96cf"),n("1da1")),bt=function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",[a("Header"),a("div",{staticClass:"center mw7 ph2"},[a("div",{staticClass:"flex-l items-start  center mw7 ph2"},[a("section",{staticClass:"pv3 mt3"},[a("div",{staticClass:"lh-solid v-mid f4"},[a("span",{staticClass:"green v-mid"},[a("span",{staticClass:"b"},[t._v(t._s(t.workshopShortname))]),t._v(" | Lesson "+t._s(t.lessonNumber)+" of "+t._s(t.lessonsInWorkshop))]),a("span",{staticClass:"pl1"},[t.lessonPassed?a("img",{staticClass:"v-mid",staticStyle:{height:"1.2rem"},attrs:{src:n("0344"),alt:"complete"}}):t._e()])]),a("h1",[t._v(t._s(t.lessonTitle))]),a("div",{staticClass:"lesson-text lh-copy",domProps:{innerHTML:t._s(t.parsedText)}})]),t.concepts?a("section",{staticClass:"dn db-ns ba border-green ph4 ml3 ml5-l mt5 mb3 mr3 measure",staticStyle:{background:"rgba(105, 196, 205, 10%)"}},[a("h2",{staticClass:"f5 fw2 green mt0 nb1 pt3"},[t._v("Useful concepts")]),a("div",{staticClass:"f6 lh-copy",domProps:{innerHTML:t._s(t.parsedConcepts)}})]):t._e()]),t.exercise?a("section",{staticClass:"exercise pb4 pt3 ph3 ph4-l mb3 mr5 flex flex-column",class:{expand:t.expandExercise},staticStyle:{background:"#F6F7F9"}},[a("div",{staticClass:"flex-none"},[a("h2",{staticClass:"mt0 mb2 green fw4 fill-current"},[a("span",{staticStyle:{"vertical-align":"-1px"}},[t.lessonPassed?a("img",{staticStyle:{height:"1rem"},attrs:{src:n("0344"),alt:"complete"}}):t.cachedCode?a("img",{staticStyle:{height:"1rem"},attrs:{src:n("d0c2"),alt:"complete"}}):a("img",{staticStyle:{height:"1rem"},attrs:{src:n("acc3"),alt:"not yet started"}})]),a("span",{staticClass:"green ttu f6 pl2 pr1 fw7 v-mid"},[t.lessonPassed?a("span",[t._v("You did it!")]):t.cachedCode?a("span",[t._v("Keep working.")]):a("span",[t._v("Try it!")])]),a("span",{staticClass:"green f6 fw5 v-mid"},[t.cachedCode&&!t.lessonPassed?a("span",[t._v(t._s(t.cachedStateMsg))]):t._e()]),a("div",{staticClass:"fr"},[t.expandExercise?a("button",{staticClass:"b--transparent bg-transparent green hover-green-muted pointer focus-outline",attrs:{title:"go smol"},on:{click:t.toggleExpandExercise}},[a("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",fill:"currentColor",viewBox:"0 0 32 32"}},[a("path",{attrs:{d:"M16 4 L28 4 L28 16 L24 12 L20 16 L16 12 L20 8z M4 16 L8 20 L12 16 L16 20 L12 24 L16 28 L4 28z"}})])]):a("button",{staticClass:"b--transparent bg-transparent charcoal-muted hover-green pointer focus-outline",attrs:{title:"embiggen the exercise"},on:{click:t.toggleExpandExercise}},[a("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",fill:"currentColor",viewBox:"0 0 32 32"}},[a("path",{attrs:{d:"M16 4 L28 4 L28 16 L24 12 L20 16 L16 12 L20 8z M4 16 L8 20 L12 16 L16 20 L12 24 L16 28 L4 28z"}})])])])]),t.exercise?a("div",{staticClass:"lh-copy",domProps:{innerHTML:t._s(t.parsedExercise)}}):t._e()]),a("div",[t.cachedCode?a("span",{staticClass:"textLink fr pb1",on:{click:t.resetCode}},[t._v("Reset Code")]):t._e()]),a("div",{staticClass:"bg-white flex-auto",staticStyle:{height:"100%"}},[a("MonacoEditor",{staticClass:"editor",attrs:{srcPath:".",height:t.editorHeight,options:t.options,code:t.code,theme:"vs",language:"javascript"},on:{mounted:t.onMounted,codeChange:t.onCodeChange}})],1),a("div",{staticClass:"flex-none"},[a("div",{staticClass:"pv2"},[t.output.test&&this.cachedCode?a("div",t._b({},"div",t.output.test,!1),[t.output.test.error?a("div",{staticClass:"lh-copy pv2 ph3 bg-red white"},[t._v("\n              Error: "+t._s(t.output.test.error.message)+"\n            ")]):t._e(),t.output.test.fail?a("div",{staticClass:"lh-copy pv2 ph3 bg-red white"},[t._v("\n              "+t._s(t.output.test.fail)+"\n            ")]):t._e(),t.output.test.success&&t.lessonPassed?a("div",{staticClass:"lh-copy pv2 ph3 bg-green white"},[t._v("\n              "+t._s(t.output.test.success)+"\n              "),t.output.test.cid?a("a",{staticClass:"link fw7 underline-hover dib ph2 mh2 white",attrs:{target:"explore-ipld",href:t.exploreIpldUrl}},[t._v("\n                View in IPLD Explorer\n              ")]):t._e()]):t._e()]):a("div",{staticClass:"lh-copy pv2 ph3"},[t._v("\n          Update the code to complete the exercise. Click "),a("strong",[t._v("submit")]),t._v(" to check your answer.\n          ")])]),a("div",{staticClass:"pt3 ph2 tr"},[(t.output.test&&t.output.test.success||t.lessonPassed)&&t.lessonNumber===t.lessonsInWorkshop?a("div",[a("Button",{staticClass:"bg-aqua white",attrs:{click:t.workshopMenu}},[t._v("More Tutorials")])],1):t.lessonPassed?a("div",[a("Button",{staticClass:"bg-aqua white",attrs:{click:t.next}},[t._v("Next")])],1):a("div",[a("Button",{staticClass:"bg-aqua white",attrs:{click:t.run}},[t._v("Submit")])],1)])])]):a("section",[a("div",{staticClass:"pt3 ph2 tr mb3"},[t.lessonNumber===t.lessonsInWorkshop?a("div",[a("Button",{staticClass:"bg-aqua white",attrs:{click:t.workshopMenu}},[t._v("More Tutorials")])],1):a("div",[a("Button",{staticClass:"bg-aqua white",attrs:{click:t.next}},[t._v("Next")])],1)])])]),a("footer",{staticClass:"bg-navy white ph2 ph3-ns mt4 flex items-center justify-around"},[a("div",{staticClass:"mw7"},[a("p",[t._v("Feeling stuck? We'd love to hear what's confusing so we can improve\n      this lesson. Please "),a("a",{attrs:{href:t.issueUrl,target:"_blank"}},[t._v("share your questions and feedback")]),t._v(".")])])])],1)},vt=[],mt=(n("f5766"),n("7f7f"),n("2c43"),n("dba0")),wt=n.n(mt),yt=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"explorer"},[n("iframe",{attrs:{src:t.src}})])},kt=[],xt={data:function(t){var e=t.$attrs.cid;e=e.toBaseEncodedString?e.toBaseEncodedString():e;var n="https://ipfs.io/ipfs/QmeznoNAoUcQdCFEEz4ktv4zLfYYyhVNin28Frsv8LLxCb/?embed=true#/explore/".concat(e);return{src:n}}},Ct=xt,_t=(n("d21f"),Object(l["a"])(Ct,yt,kt,!1,null,"d9fc3ea4",null));_t.options.__file="Explorer.vue";var St=_t.exports,Pt=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("button",{staticClass:"avenir dib v-mid fw7 nowrap lh-copy bn br1 pv2 ph3 pointer focus-outline",on:{click:t.click}},[t._t("default",[t._v("Submit")])],2)},It=[],Tt={props:{click:{type:Function,required:!0}}},Lt=Tt,Dt=(n("6a07"),Object(l["a"])(Lt,Pt,It,!1,null,"6f2f165f",null));Dt.options.__file="Button.vue";var Et=Dt.exports,At=n("cde5"),jt=n("c449"),zt=n("0e54"),Ot=n("a70e");Ot.registerLanguage("js",n("4dd1")),Ot.registerLanguage("javascript",n("4dd1")),Ot.registerLanguage("json",n("5ad2")),zt.setOptions({highlight:function(t){return Ot.highlightAuto(t).value}});var $t,Ft=function(){var t=Object(gt["a"])(regeneratorRuntime.mark(function t(e,n){var a,o,s,r,i=arguments;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:return a=i.length>2&&void 0!==i[2]?i[2]:{},t.next=3,new Promise(function(t){return n.on("ready",t)});case 3:t.prev=3,o=new Function("ipfs","require",e),t.next=11;break;case 7:return t.prev=7,t.t0=t["catch"](3),s={error:t.t0},t.abrupt("return",s);case 11:return r=function(t){if(!a[t])throw new Error("Cannot find modules: ".concat(t));return a[t]},t.prev=12,t.next=15,o(n,r)();case 15:s=t.sent,t.next=21;break;case 18:t.prev=18,t.t1=t["catch"](12),s={error:t.t1};case 21:return t.abrupt("return",s);case 22:case"end":return t.stop()}},t,this,[[3,7],[12,18]])}));return function(e,n){return t.apply(this,arguments)}}(),Bt="/* globals ipfs */\n\nconst run = async () => {\n  // your code goes here!\n  // be sure this function returns the requested value\n}\n\nreturn run\n\n",Nt={components:{MonacoEditor:wt.a,Explorer:St,Button:Et,Header:S},data:function(t){return{text:t.$attrs.text,exercise:t.$attrs.exercise,concepts:t.$attrs.concepts,cachedCode:!!localStorage["cached"+t.$route.path],code:localStorage[t.cacheKey]||t.$attrs.code||Bt,parsedText:zt(t.$attrs.text),parsedExercise:zt(t.$attrs.exercise||""),parsedConcepts:zt(t.$attrs.concepts||""),cacheKey:"cached"+t.$route.path,cachedStateMsg:"",lessonKey:"passed"+t.$route.path,lessonPassed:!!localStorage["passed"+t.$route.path],lessonTitle:t.$attrs.lessonTitle,output:t.output,IPFS:At,expandExercise:!1,options:{selectOnLineNumbers:!1,lineNumbersMinChars:3,scrollBeyondLastLine:!1,automaticLayout:!0}}},computed:{exploreIpldUrl:function(){var t=this.output.test&&this.output.test.cid&&this.output.test.cid.toBaseEncodedString();return t=t||"","https://ipfs.io/ipfs/QmYJETQ15RAnKXoJxqpXzcvQ2DuQA35UHwJBTjTPCSs9Ky/#/explore/".concat(t)},lessonNumber:function(){return parseInt(this.$route.path.slice(this.$route.path.lastIndexOf("/")+1),10)},workshopShortname:function(){var t=this.$route.path.charAt(1).toUpperCase()+this.$route.path.slice(2,this.$route.path.lastIndexOf("/"));return t.split("-").join(" ")},issueUrl:function(){return"https://github.com/ProtoSchool/protoschool.github.io/issues/new?assignees=&labels=lesson-feedback&template=lesson-feedback.md&title=Lesson+Feedback%3A+".concat(this.workshopShortname,"+-+Lesson+").concat(this.lessonNumber,"+(").concat(this.lessonTitle,")")},lessonsInWorkshop:function(){var t=this.$route.path.slice(0,-2),e=this.$route.path.slice(-2);while("404"!==this.$router.resolve(t+e).route.name)e++,e=e.toString().padStart(2,"0");return parseInt(e)-1},editorHeight:function(){if(!this.expandExercise){var t=18,e=Math.min(Math.max(this.code.split("\n").length,12),25),n=e*t;return n}}},beforeCreate:function(){this.output={}},updated:function(){},beforeUpdate:function(){},methods:{run:function(){var t=Object(gt["a"])(regeneratorRuntime.mark(function t(){var e,n,o,s,r,i;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:return $t&&($t.stop(),$t=null),e=this.output,n=this.createIPFS(),o=this.editor.getValue(),s={},this.$attrs.modules&&(s=this.$attrs.modules),t.next=8,Ft(o,n,s);case 8:if(r=t.sent,!r||!r.error){t.next=13;break}return a["a"].set(e,"test",r),this.lessonPassed=!!localStorage[this.lessonKey],t.abrupt("return");case 13:return t.next=15,this.$attrs.validate(r,n);case 15:i=t.sent,a["a"].set(e,"test",i),jt.isCID(r)?($t=n,a["a"].set(e.test,"cid",r)):n.stop(),e.test.success&&(localStorage[this.lessonKey]="passed"),this.lessonPassed=!!localStorage[this.lessonKey];case 20:case"end":return t.stop()}},t,this)}));function e(){return t.apply(this,arguments)}return e}(),createIPFS:function(){return this.$attrs.createIPFS?this.$attrs.createIPFS():new At({repo:Math.random().toString()})},resetCode:function(){this.code=this.$attrs.code||Bt,this.editor.setValue(this.code),this.clearPassed()},clearPassed:function(){delete localStorage[this.lessonKey],this.lessonPassed=!!localStorage[this.lessonKey]},loadCodeFromCache:function(){this.code=localStorage[this.cacheKey],this.editor.setValue(this.code)},onMounted:function(t){this.editor=t,this.cachedCode&&(this.loadCodeFromCache(),this.cachedStateMsg="Pick up where you left off. We've saved your code for you!",this.lessonPassed&&this.run())},onCodeChange:function(){this.editor.getValue()===(this.$attrs.code||Bt)?(delete localStorage[this.cacheKey],this.cachedCode=!!localStorage[this.cacheKey]):this.code===this.editor.getValue()||(localStorage[this.cacheKey]=this.editor.getValue(),this.code=this.editor.getValue(),this.cachedCode=!!localStorage[this.cacheKey],this.cachedStateMsg="We're saving your code as you go.")},next:function(){this.exercise?a["a"].set(this.output,"test",null):(localStorage[this.lessonKey]="passed",this.lessonPassed=!!localStorage[this.lessonKey]);var t=this.lessonNumber,e=(parseInt(t)+1).toString().padStart(2,"0");this.$router.push({path:e})},workshopMenu:function(){this.exercise?a["a"].set(this.output,"test",null):(localStorage[this.lessonKey]="passed",this.lessonPassed=!!localStorage[this.lessonKey]),this.$router.push({path:"/"})},toggleExpandExercise:function(){this.expandExercise=!this.expandExercise}}},qt=Nt,Rt=(n("0693"),Object(l["a"])(qt,bt,vt,!1,null,"60f5cba8",null));Rt.options.__file="Lesson.vue";var Wt=Rt.exports,Gt=n("67ff"),Mt=n.n(Gt),Ut=n("0f80"),Ht=n.n(Ut),Yt=n("c5bb"),Jt=n.n(Yt),Kt=n("c449"),Vt=function(){var t=Object(gt["a"])(regeneratorRuntime.mark(function t(e,n){var a,o,s,r,i;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if(Kt.isCID(e)){t.next=4;break}return t.abrupt("return",{fail:"Did not return a valid CID instance."});case 4:if(a="zdpuApm55Qv2zRxb3KKjVUxhQSw2r4a7jeiDV7163yCQnfivy",e.toBaseEncodedString()!==a){t.next=9;break}return t.abrupt("return",{success:"Everything works!"});case 9:return t.next=11,n.dag.get(e);case 11:return o=t.sent,s=JSON.stringify({test:1}),r=JSON.stringify(o.value),i='Was expecting "'.concat(s,'" but got "').concat(r,'"'),t.abrupt("return",{fail:i});case 16:case"end":return t.stop()}},t,this)}));return function(e,n){return t.apply(this,arguments)}}(),Qt={components:{Lesson:Wt},data:function(){return{text:Mt.a,validate:Vt,exercise:Jt.a,concepts:Ht.a}}},Zt=Qt,Xt=Object(l["a"])(Zt,pt,ft,!1,null,null,null);Xt.options.__file="01.vue";var te=Xt.exports,ee=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-02"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,modules:t.modules,exercise:t.exercise,concepts:t.concepts,lessonTitle:"Create a new node that's linked to an old one"}})],1)},ne=[],ae=n("979c"),oe=n.n(ae),se=n("9bda1"),re=n.n(se),ie=n("c355"),ce=n.n(ie),le=n("c449"),ue="/* globals ipfs */\n\nconst run = async () => {\n  let cid = await ipfs.dag.put({test: 1})\n  // your code goes here\n}\n\nreturn run\n",de=function(){var t=Object(gt["a"])(regeneratorRuntime.mark(function t(e,n){var a,o,s,r,i;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if(le.isCID(e)){t.next=4;break}return t.abrupt("return",{fail:"Did not return a valid CID instance."});case 4:if(a="zdpuAoPanArLvuFtuvmLYuSvp8zE8wuKSMZUkMN8Y1PaHLvKP",e.toBaseEncodedString()!==a){t.next=9;break}return t.abrupt("return",{success:"Everything works!"});case 9:return t.next=11,n.dag.get(e);case 11:return o=t.sent,s=JSON.stringify({bar:new le(a)}),r=JSON.stringify(o.value),i='Was expecting "'.concat(s,'" but got "').concat(r,'"'),t.abrupt("return",{fail:i});case 16:case"end":return t.stop()}},t,this)}));return function(e,n){return t.apply(this,arguments)}}(),he={cids:n("c449")},pe={components:{Lesson:Wt},data:function(){return{code:ue,text:oe.a,validate:de,modules:he,exercise:ce.a,concepts:re.a}}},fe=pe,ge=Object(l["a"])(fe,ee,ne,!1,null,null,null);ge.options.__file="02.vue";var be=ge.exports,ve=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-03"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,modules:t.modules,exercise:t.exercise,lessonTitle:"Read nested data using links"}})],1)},me=[],we=n("d4ea"),ye=n.n(we),ke=n("cab1"),xe=n.n(ke),Ce="/* globals ipfs */\n\nconst run = async () => {\n  let cid = await ipfs.dag.put({test: 1})\n  let cid2 = await ipfs.dag.put({bar: cid})\n  /* your code goes here */\n}\n\nreturn run\n",_e=function(){var t=Object(gt["a"])(regeneratorRuntime.mark(function t(e,n){var a,o,s;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if(1!==e){t.next=4;break}return t.abrupt("return",{success:"Great job, got 1."});case 4:if(1!==e.value||""!==e.remainderPath){t.next=8;break}return t.abrupt("return",{success:"Great job! You've completed this series of lessons!"});case 8:return a=JSON.stringify({value:1,remainderPath:""}),o=JSON.stringify(e),s='Was expecting "'.concat(a,'" but got "').concat(o,'".'),t.abrupt("return",{fail:s});case 12:case"end":return t.stop()}},t,this)}));return function(e,n){return t.apply(this,arguments)}}(),Se={cids:n("c449")},Pe={components:{Lesson:Wt},data:function(){return{code:Ce,text:ye.a,validate:_e,modules:Se,exercise:xe.a}}},Ie=Pe,Te=Object(l["a"])(Ie,ve,me,!1,null,null,null);Te.options.__file="03.vue";var Le=Te.exports,De=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-blog-01"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,exercise:t.exercise,lessonTitle:"Link an author to a blog post using its CID"}})],1)},Ee=[],Ae=(n("2fdb"),n("ac4d"),n("8a81"),n("a10e")),je=n.n(Ae),ze=n("358a"),Oe=n.n(ze),$e=(n("a481"),n("c449")),Fe=function(t){return JSON.stringify(t,null," ").replace("\n","")},Be=function(t,e){if(!Array.isArray(t)||t.length!==e)return{fail:"You need to return an array of ".concat(e," CIDs")};var n=t.every($e.isCID);return n?{success:""}:{fail:"Array elements need to be CIDs"}},Ne={stringify:Fe,validateArrayOfCids:Be},qe=n("c2b3"),Re=n("c449"),We='/* globals ipfs */\n\nconst run = async () => {\n  const natCid = await ipfs.dag.put({author: "Nat"})\n  const samCid = await ipfs.dag.put({author: "Sam"})\n\n  // Modify the blog posts below\n\n  const treePostCid = await ipfs.dag.put({content: "trees"})\n  const computerPostCid = await ipfs.dag.put({content: "computers"})\n\n  return [treePostCid, computerPostCid]\n}\n\nreturn run\n',Ge=function(){var t=Object(gt["a"])(regeneratorRuntime.mark(function t(e,n){var a,o,s,r,i,c,l,u,d,h,p,f,g,b,v;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if(a=Ne.validateArrayOfCids(e,2),!a.fail){t.next=5;break}return t.abrupt("return",a);case 5:o="zdpuAyB57Xn8fuPvM8Gam5ycJTz6bgzLqtQBihyFuh5T7a6SK",s="zdpuAzUoWGnKe4p13YbexQrb5AMhnDWDCqJt2XyqVPU6DxS4m",r=!0,i=!1,c=void 0,t.prev=10,l=e[Symbol.iterator]();case 12:if(r=(u=l.next()).done){t.next=38;break}return d=u.value,t.next=16,n.dag.get(d);case 16:if(h=t.sent,p=h.value,void 0!==p.author){t.next=20;break}return t.abrupt("return",{fail:"Blog posts need to have an `author` field."});case 20:if(Re.isCID(p.author)){t.next=22;break}return t.abrupt("return",{fail:'The value of `author` needs to be a link (`{"/": "some-cid"}`).'});case 22:if(f=p.author,[o,s].includes(f.toBaseEncodedString())){t.next=25;break}return t.abrupt("return",{fail:"You need to link to the CID of an author (Nat or Sam)."});case 25:g=void 0,t.t0=p.content,t.next="trees"===t.t0?29:"computers"===t.t0?31:33;break;case 29:return g=s,t.abrupt("break",33);case 31:return g=o,t.abrupt("break",33);case 33:if(f.toBaseEncodedString()===g){t.next=35;break}return t.abrupt("return",{fail:'The author of the "'.concat(p.content,'" blog post (').concat(f,") did not match the the expected author (").concat(g,").")});case 35:r=!0,t.next=12;break;case 38:t.next=44;break;case 40:t.prev=40,t.t1=t["catch"](10),i=!0,c=t.t1;case 44:t.prev=44,t.prev=45,r||null==l.return||l.return();case 47:if(t.prev=47,!i){t.next=50;break}throw c;case 50:return t.finish(47);case 51:return t.finish(44);case 52:if(b=["zdpuAkSPEnmgR1rqKkzpFN5qfJshCQKqMaVtUSpQJAMLdw3KF","zdpuAxzw762rP3CXZpAsKagPFR2AyqmZU2sN8U1GuVCeoYUEo"],v=e.map(function(t){return t.toBaseEncodedString()}),!qe(v.sort(),b.sort())){t.next=58;break}return t.abrupt("return",{success:"Everything works!"});case 58:return t.abrupt("return",{fail:"The returned CIDs ".concat(Ne.stringify(v)," did not match the expected CIDs ").concat(Ne.stringify(b),".")});case 59:case"end":return t.stop()}},t,this,[[10,40,44,52],[45,,47,51]])}));return function(e,n){return t.apply(this,arguments)}}(),Me={components:{Lesson:Wt},data:function(){return{code:We,text:je.a,validate:Ge,exercise:Oe.a}}},Ue=Me,He=Object(l["a"])(Ue,De,Ee,!1,null,null,null);He.options.__file="01.vue";var Ye=He.exports,Je=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-blog-02"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,exercise:t.exercise,lessonTitle:"Update posts with tags and watch their CIDs change"}})],1)},Ke=[],Ve=n("df39"),Qe=n.n(Ve),Ze=n("7d14"),Xe=n.n(Ze),tn=n("c2b3"),en='/* globals ipfs */\n\nconst run = async () => {\n  const natCid = await ipfs.dag.put({author: "Nat"})\n  const samCid = await ipfs.dag.put({author: "Sam"})\n\n  // Modify the blog posts below\n\n  const treePostCid = await ipfs.dag.put({\n    content: "trees",\n    author: samCid\n  })\n  const computerPostCid = await ipfs.dag.put({\n    content: "computers",\n    author: natCid\n  })\n\n  console.log(\'post about trees:\', treePostCid.toBaseEncodedString())\n  console.log(\'post about computers:\', computerPostCid.toBaseEncodedString())\n\n  return [treePostCid, computerPostCid]\n}\n\nreturn run',nn=function(){var t=Object(gt["a"])(regeneratorRuntime.mark(function t(e,n){var a,o,s,r,i,c,l,u,d,h,p;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if(a=Ne.validateArrayOfCids(e,2),!a.fail){t.next=5;break}return t.abrupt("return",a);case 5:o=!0,s=!1,r=void 0,t.prev=8,i=e[Symbol.iterator]();case 10:if(o=(c=i.next()).done){t.next=36;break}return l=c.value,t.next=14,n.dag.get(l);case 14:if(u=t.sent,d=u.value,void 0!==d.tags){t.next=18;break}return t.abrupt("return",{fail:"Blog posts need to have a `tags` field."});case 18:if(Array.isArray(d.tags)){t.next=20;break}return t.abrupt("return",{fail:"The value of the `tags` field must be an array of strings."});case 20:if(h=d.tags.every(function(t){return"string"===typeof t}),h){t.next=23;break}return t.abrupt("return",{fail:"Tags need to be strings."});case 23:p=void 0,t.t0=d.content,t.next="trees"===t.t0?27:"computers"===t.t0?29:31;break;case 27:return p=["hobby","outdoor"],t.abrupt("break",31);case 29:return p=["hobby"],t.abrupt("break",31);case 31:if(tn(d.tags.sort(),p.sort())){t.next=33;break}return t.abrupt("return",{fail:'The tags of the "'.concat(d.content,'" blog post ').concat(Ne.stringify(d.tags)," did not match the the expected tags ").concat(Ne.stringify(p),".")});case 33:o=!0,t.next=10;break;case 36:t.next=42;break;case 38:t.prev=38,t.t1=t["catch"](8),s=!0,r=t.t1;case 42:t.prev=42,t.prev=43,o||null==i.return||i.return();case 45:if(t.prev=45,!s){t.next=48;break}throw r;case 48:return t.finish(45);case 49:return t.finish(42);case 50:return t.abrupt("return",{success:"Everything works! Did you remember to check the console logs?"});case 51:case"end":return t.stop()}},t,this,[[8,38,42,50],[43,,45,49]])}));return function(e,n){return t.apply(this,arguments)}}(),an={components:{Lesson:Wt},data:function(){return{code:en,text:Qe.a,validate:nn,exercise:Xe.a}}},on=an,sn=Object(l["a"])(on,Je,Ke,!1,null,null,null);sn.options.__file="02.vue";var rn=sn.exports,cn=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-blog-03"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,exercise:t.exercise,lessonTitle:"Build a tag cloud with arrays of links"}})],1)},ln=[],un=n("9ee1"),dn=n.n(un),hn=n("39aa"),pn=n.n(hn),fn=n("c2b3"),gn=n("c449"),bn='/* globals ipfs */\n\nconst run = async () => {\n  const natCid = await ipfs.dag.put({author: "Nat"})\n  const samCid = await ipfs.dag.put({author: "Sam"})\n  const treePostCid = await ipfs.dag.put({\n    content: "trees",\n    author: samCid,\n    tags: ["outdoor", "hobby"]\n  })\n  const computerPostCid = await ipfs.dag.put({\n    content: "computers",\n    author: natCid,\n    tags: ["hobby"]\n  })\n\n  // Add your code here\n}\n\nreturn run',vn=function(){var t=Object(gt["a"])(regeneratorRuntime.mark(function t(e,n){var a,o,s,r,i,c,l,u,d,h,p,f,g,b;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if(a=Ne.validateArrayOfCids(e,2),!a.fail){t.next=5;break}return t.abrupt("return",a);case 5:o=!0,s=!1,r=void 0,t.prev=8,i=e[Symbol.iterator]();case 10:if(o=(c=i.next()).done){t.next=44;break}return l=c.value,t.next=14,n.dag.get(l);case 14:if(u=t.sent,d=u.value,void 0!==d.tag){t.next=18;break}return t.abrupt("return",{fail:"Tag nodes need to have a `tag` field."});case 18:if("string"===typeof d.tag){t.next=20;break}return t.abrupt("return",{fail:"`tag` field needs to be a string."});case 20:if(void 0!==d.posts){t.next=22;break}return t.abrupt("return",{fail:"Tag nodes need to have a `posts` field."});case 22:if(Array.isArray(d.posts)){t.next=24;break}return t.abrupt("return",{fail:"The value of the `posts` field must be an array of links."});case 24:if(h=d.posts.every(function(t){return gn.isCID(t)}),h){t.next=27;break}return t.abrupt("return",{fail:"The values of the `posts` array must be links."});case 27:p="zdpuAri55PR9iW239ahcbnfkFU2TVyD5iLmqEFmwY634KZAJV",f="zdpuAqaHPSosSZFRPe7u5q3yNqgg4JuvrLaUJxGamNPLhWivX",g=void 0,t.t0=d.tag,t.next="hobby"===t.t0?33:"outdoor"===t.t0?35:37;break;case 33:return g=[p,f],t.abrupt("break",38);case 35:return g=[p],t.abrupt("break",38);case 37:return t.abrupt("return",{fail:"Wrong tag (".concat(d.tag,'). Did you mean "hobby" or "outdoor"?')});case 38:if(b=d.posts.map(function(t){return t.toBaseEncodedString()}),fn(b.sort(),g.sort())){t.next=41;break}return t.abrupt("return",{fail:'The posts of the tag "'.concat(d.tag,'" ').concat(Ne.stringify(b)," did not match the the expected posts ").concat(Ne.stringify(g),".")});case 41:o=!0,t.next=10;break;case 44:t.next=50;break;case 46:t.prev=46,t.t1=t["catch"](8),s=!0,r=t.t1;case 50:t.prev=50,t.prev=51,o||null==i.return||i.return();case 53:if(t.prev=53,!s){t.next=56;break}throw r;case 56:return t.finish(53);case 57:return t.finish(50);case 58:return t.abrupt("return",{success:"Everything works!"});case 59:case"end":return t.stop()}},t,this,[[8,46,50,58],[51,,53,57]])}));return function(e,n){return t.apply(this,arguments)}}(),mn={components:{Lesson:Wt},data:function(){return{code:bn,text:dn.a,validate:vn,exercise:pn.a}}},wn=mn,yn=Object(l["a"])(wn,cn,ln,!1,null,null,null);yn.options.__file="03.vue";var kn=yn.exports,xn=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-blog-04"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,exercise:t.exercise,lessonTitle:"Add a new blog post linked to an author and tags"}})],1)},Cn=[],_n=n("f211"),Sn=n.n(_n),Pn=n("d56b"),In=n.n(Pn),Tn=n("c2b3"),Ln=n("c449"),Dn='/* globals ipfs */\n\nconst run = async () => {\n  const natCid = await ipfs.dag.put({author: "Nat"})\n  const samCid = await ipfs.dag.put({author: "Sam"})\n  const treePostCid = await ipfs.dag.put({\n    content: "trees",\n    author: samCid,\n    tags: ["outdoor", "hobby"]\n  })\n  const computerPostCid = await ipfs.dag.put({\n    content: "computers",\n    author: natCid,\n    tags: ["hobby"]\n  })\n\n  // Add your code here\n\n  const outdoorTagCid = await ipfs.dag.put({\n    tag: "outdoor",\n    posts: [ treePostCid ]\n  })\n  const hobbyTagCid = await ipfs.dag.put({\n    tag: "hobby",\n    posts: [ treePostCid, computerPostCid ]\n  })\n}\n\nreturn run',En=function(){var t=Object(gt["a"])(regeneratorRuntime.mark(function t(e,n){var a,o,s,r,i;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if(Ln.isCID(e)){t.next=4;break}return t.abrupt("return",{fail:"Did not return a valid CID instance."});case 4:return t.next=6,n.dag.get(e);case 6:if(a=t.sent.value,void 0!==a.content){t.next=9;break}return t.abrupt("return",{fail:"Blog post needs to have a `content` field."});case 9:if("dogs"===a.content){t.next=11;break}return t.abrupt("return",{fail:'The `content` of the new blog post must be "dogs".'});case 11:if(void 0!==a.author){t.next=13;break}return t.abrupt("return",{fail:"Blog post needs to have an `author` field."});case 13:if(Ln.isCID(a.author)){t.next=15;break}return t.abrupt("return",{fail:"The value of `author` needs to be a link."});case 15:if(o="zdpuAzUoWGnKe4p13YbexQrb5AMhnDWDCqJt2XyqVPU6DxS4m",s=a.author.toBaseEncodedString(),s===o){t.next=19;break}return t.abrupt("return",{fail:"The author of the new blog post needs to be Sam."});case 19:if(void 0!==a.tags){t.next=21;break}return t.abrupt("return",{fail:"Blog post needs to have a `tags` field."});case 21:if(Array.isArray(a.tags)){t.next=23;break}return t.abrupt("return",{fail:"The value of the `tags` field must be an array of strings."});case 23:if(r=a.tags.every(function(t){return"string"===typeof t}),r){t.next=26;break}return t.abrupt("return",{fail:"Tags need to be strings."});case 26:if(i=["funny","hobby"],Tn(a.tags.sort(),i.sort())){t.next=29;break}return t.abrupt("return",{fail:'The tags of the "'.concat(a.content,'" blog post ').concat(Ne.stringify(a.tags)," did not match the the expected tags ").concat(Ne.stringify(i),".")});case 29:return t.abrupt("return",{success:"Everything works!"});case 30:case"end":return t.stop()}},t,this)}));return function(e,n){return t.apply(this,arguments)}}(),An={components:{Lesson:Wt},data:function(){return{code:Dn,text:Sn.a,validate:En,exercise:In.a}}},jn=An,zn=Object(l["a"])(jn,xn,Cn,!1,null,null,null);zn.options.__file="04.vue";var On=zn.exports,$n=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-blog-05"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,exercise:t.exercise,lessonTitle:"Add a new tag linked to multiple blog posts"}})],1)},Fn=[],Bn=n("1d33"),Nn=n.n(Bn),qn=n("81d9"),Rn=n.n(qn),Wn=n("c2b3"),Gn=n("c449"),Mn='/* globals ipfs */\n\nconst run = async () => {\n  const natCid = await ipfs.dag.put({author: "Nat"})\n  const samCid = await ipfs.dag.put({author: "Sam"})\n  const treePostCid = await ipfs.dag.put({\n    content: "trees",\n    author: samCid,\n    tags: ["outdoor", "hobby"]\n  })\n  const computerPostCid = await ipfs.dag.put({\n    content: "computers",\n    author: natCid,\n    tags: ["hobby"]\n  })\n  const dogPostCid = await ipfs.dag.put({\n    content: "dogs",\n    author: samCid,\n    tags: ["funny", "hobby"]\n  })\n\n  const outdoorTagCid = await ipfs.dag.put({\n    tag: "outdoor",\n    posts: [ treePostCid ]\n  })\n  const hobbyTagCid = await ipfs.dag.put({\n    tag: "hobby",\n    posts: [ treePostCid, computerPostCid ]\n  })\n\n  // Add your new code here and modify the tags above\n}\n\nreturn run',Un=function(){var t=Object(gt["a"])(regeneratorRuntime.mark(function t(e,n){var a,o,s,r,i,c,l,u,d,h,p,f,g,b,v;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if(a=Ne.validateArrayOfCids(e,3),!a.fail){t.next=5;break}return t.abrupt("return",a);case 5:o=!0,s=!1,r=void 0,t.prev=8,i=e[Symbol.iterator]();case 10:if(o=(c=i.next()).done){t.next=47;break}return l=c.value,t.next=14,n.dag.get(l);case 14:if(u=t.sent,d=u.value,void 0!==d.tag){t.next=18;break}return t.abrupt("return",{fail:"Tag nodes need to have a `tag` field."});case 18:if("string"===typeof d.tag){t.next=20;break}return t.abrupt("return",{fail:"`tag` field needs to be a string."});case 20:if(void 0!==d.posts){t.next=22;break}return t.abrupt("return",{fail:"Tag nodes need to have a `posts` field."});case 22:if(Array.isArray(d.posts)){t.next=24;break}return t.abrupt("return",{fail:"The value of the `posts` field must be an array of links."});case 24:if(h=d.posts.every(function(t){return Gn.isCID(t)}),h){t.next=27;break}return t.abrupt("return",{fail:"The values of the `posts` array must be links."});case 27:p=void 0,f="zdpuAri55PR9iW239ahcbnfkFU2TVyD5iLmqEFmwY634KZAJV",g="zdpuAqaHPSosSZFRPe7u5q3yNqgg4JuvrLaUJxGamNPLhWivX",b="zdpuAuaznfNPWfgSSrcGxkm3yqyssY6mz8i5T2gxqpEpNExG6",t.t0=d.tag,t.next="funny"===t.t0?34:"hobby"===t.t0?36:"outdoor"===t.t0?38:40;break;case 34:return p=[b],t.abrupt("break",41);case 36:return p=[f,g,b],t.abrupt("break",41);case 38:return p=[f],t.abrupt("break",41);case 40:return t.abrupt("return",{fail:"Wrong tag (".concat(d.tag,"). Did you mean one of funny, hobby, outdoor?")});case 41:if(v=d.posts.map(function(t){return t.toBaseEncodedString()}),Wn(v.sort(),p.sort())){t.next=44;break}return t.abrupt("return",{fail:'The posts of the tag "'.concat(d.tag,'" ').concat(Ne.stringify(v)," did not match the the expected posts ").concat(Ne.stringify(p),".")});case 44:o=!0,t.next=10;break;case 47:t.next=53;break;case 49:t.prev=49,t.t1=t["catch"](8),s=!0,r=t.t1;case 53:t.prev=53,t.prev=54,o||null==i.return||i.return();case 56:if(t.prev=56,!s){t.next=59;break}throw r;case 59:return t.finish(56);case 60:return t.finish(53);case 61:return t.abrupt("return",{success:"Everything works!"});case 62:case"end":return t.stop()}},t,this,[[8,49,53,61],[54,,56,60]])}));return function(e,n){return t.apply(this,arguments)}}(),Hn={components:{Lesson:Wt},data:function(){return{code:Mn,text:Nn.a,validate:Un,exercise:Rn.a}}},Yn=Hn,Jn=Object(l["a"])(Yn,$n,Fn,!1,null,null,null);Jn.options.__file="05.vue";var Kn=Jn.exports,Vn=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-blog-06"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,exercise:t.exercise,lessonTitle:"List posts chronologically with a chain of links"}})],1)},Qn=[],Zn=n("d39a"),Xn=n.n(Zn),ta=n("e522"),ea=n.n(ta),na=n("c449"),aa='/* globals ipfs */\n\nconst run = async () => {\n  const natCid = await ipfs.dag.put({author: "Nat"})\n  const samCid = await ipfs.dag.put({author: "Sam"})\n\n  // Modify the blog posts below\n\n  const treePostCid = await ipfs.dag.put({\n    content: "trees",\n    author: samCid,\n    tags: ["outdoor", "hobby"]\n  })\n  const computerPostCid = await ipfs.dag.put({\n    content: "computers",\n    author: natCid,\n    tags: ["hobby"]\n  })\n  const dogPostCid = await ipfs.dag.put({\n    content: "dogs",\n    author: samCid,\n    tags: ["funny", "hobby"]\n  })\n\n  const outdoorTagCid = await ipfs.dag.put({\n    tag: "outdoor",\n    posts: [ treePostCid ]\n  })\n  const hobbyTagCid = await ipfs.dag.put({\n    tag: "hobby",\n    posts: [ treePostCid, computerPostCid, dogPostCid ]\n  })\n  const funnyTagCid = await ipfs.dag.put({\n    tag: "funny",\n    posts: [ dogPostCid ]\n  })\n\n  return dogPostCid\n}\n\nreturn run',oa=function(){var t=Object(gt["a"])(regeneratorRuntime.mark(function t(e,n){var a,o,s,r,i,c,l,u,d,h,p;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if(na.isCID(e)){t.next=4;break}return t.abrupt("return",{fail:"Did not return a valid CID instance."});case 4:return t.next=6,n.dag.get(e);case 6:if(a=t.sent.value,void 0!==a.content&&"dogs"===a.content){t.next=9;break}return t.abrupt("return",{fail:'The returned value should be the CID of the "dogs" blog post.'});case 9:if(void 0!==a.prev){t.next=11;break}return t.abrupt("return",{fail:'The "dogs" blog post needs to have a `prev` field.'});case 11:if(na.isCID(a.prev)){t.next=13;break}return t.abrupt("return",{fail:'The value of `prev` of the "dogs" blog post needs to be a link.'});case 13:return o="zdpuAxe3g8XBLrqbp3NrjaiBLTrXjJ3SJymePGutsRRMrhAKS",s="zdpuAwwT4kGJxT7mgVZRgvmV3ke8qGNZGLuCgLhJsdBSQGM44",r="zdpuAri55PR9iW239ahcbnfkFU2TVyD5iLmqEFmwY634KZAJV",i=a.prev,t.next=19,n.dag.get(i);case 19:if(c=t.sent.value,void 0!==c.content){t.next=22;break}return t.abrupt("return",{fail:'The "dogs" blog post should link to the "computers" blog post.'});case 22:if("computers"===c.content){t.next=24;break}return t.abrupt("return",{fail:'The "dogs" blog post should link to the "computers" blog post, but it links to '.concat(c.content,".")});case 24:if(void 0!==c.prev){t.next=26;break}return t.abrupt("return",{fail:'The "computers" blog post needs to have a `prev` field.'});case 26:if(na.isCID(c.prev)){t.next=28;break}return t.abrupt("return",{fail:'The value of `prev` of the "computers" blog post needs to be a link.'});case 28:return l=c.prev,t.next=31,n.dag.get(l);case 31:if(u=t.sent.value,void 0!==u.content){t.next=34;break}return t.abrupt("return",{fail:'The "compputers" blog post should link to the "trees" blog post.'});case 34:if("trees"===u.content){t.next=36;break}return t.abrupt("return",{fail:'The "compputers" blog post should link to the "trees" blog post, but it links to '.concat(u.content,".")});case 36:if(!("prev"in u)){t.next=38;break}return t.abrupt("return",{fail:'The "trees" blog post shouldn\'t link to other blog posts.'});case 38:if(d=l.toBaseEncodedString(),d===r){t.next=41;break}return t.abrupt("return",{fail:'The "computers" blog post should link to the "trees" blog post, but it links to '.concat(d,".")});case 41:if(h=i.toBaseEncodedString(),h===s){t.next=44;break}return t.abrupt("return",{fail:'The "dogs" blog post should link to the "computers" blog post, but it links to '.concat(h,".")});case 44:if(p=e.toBaseEncodedString(),p!==o){t.next=49;break}return t.abrupt("return",{success:"Everything works!"});case 49:return t.abrupt("return",{fail:"The returned CID ".concat(p," did not match the expected CID ").concat(o,".")});case 50:case"end":return t.stop()}},t,this)}));return function(e,n){return t.apply(this,arguments)}}(),sa={components:{Lesson:Wt},data:function(){return{code:aa,text:Xn.a,validate:oa,exercise:ea.a}}},ra=sa,ia=Object(l["a"])(ra,Vn,Qn,!1,null,null,null);ia.options.__file="06.vue";var ca=ia.exports,la=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-blog-07"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,modules:t.modules,exercise:t.exercise,lessonTitle:"Traverse through all posts, starting with the most recent"}})],1)},ua=[],da=n("e776"),ha=n.n(da),pa=n("a28b"),fa=n.n(pa),ga=n("c2b3"),ba=n("c449"),va='/* globals ipfs */\n\nconst traversePosts = async (cid) => {\n  // Your code goes here\n}\n\nconst run = async () => {\n  const natCid = await ipfs.dag.put({author: "Nat"})\n  const samCid = await ipfs.dag.put({author: "Sam"})\n  const treePostCid = await ipfs.dag.put({\n    content: "trees",\n    author: samCid,\n    tags: ["outdoor", "hobby"]\n  })\n  const computerPostCid = await ipfs.dag.put({\n    content: "computers",\n    author: natCid,\n    tags: ["hobby"],\n    prev: treePostCid\n  })\n  const dogPostCid = await ipfs.dag.put({\n    content: "dogs",\n    author: samCid,\n    tags: ["funny", "hobby"],\n    prev: computerPostCid\n  })\n\n  const outdoorTagCid = await ipfs.dag.put({\n    tag: "outdoor",\n    posts: [ treePostCid ]\n  })\n  const hobbyTagCid = await ipfs.dag.put({\n    tag: "hobby",\n    posts: [ treePostCid, computerPostCid, dogPostCid ]\n  })\n  const funnyTagCid = await ipfs.dag.put({\n    tag: "funny",\n    posts: [ dogPostCid ]\n  })\n\n  return traversePosts\n}\n\nreturn run',ma=function(){var t=Object(gt["a"])(regeneratorRuntime.mark(function t(e,n){var a,o,s,r,i,c,l;return regeneratorRuntime.wrap(function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{fail:"You forgot to return a result :)"});case 2:if("function"===typeof e){t.next=4;break}return t.abrupt("return",{fail:"Return value needs to be a function."});case 4:return a="zdpuAxe3g8XBLrqbp3NrjaiBLTrXjJ3SJymePGutsRRMrhAKS",o="zdpuAwwT4kGJxT7mgVZRgvmV3ke8qGNZGLuCgLhJsdBSQGM44",s="zdpuAri55PR9iW239ahcbnfkFU2TVyD5iLmqEFmwY634KZAJV",t.prev=7,t.next=10,e(new ba(a));case 10:if(r=t.sent,void 0!==r){t.next=13;break}return t.abrupt("return",{fail:"Your function needs to return 3 CIDs."});case 13:if(3===r.length){t.next=15;break}return t.abrupt("return",{fail:"Your function needs to return 3 CIDs."});case 15:if(i=r.every(ba.isCID),i){t.next=18;break}return t.abrupt("return",{fail:"Your function needs to return CIDs"});case 18:if(c=[s,o,a],l=r.map(function(t){return t.toBaseEncodedString()}),ga(l.sort(),c.sort())){t.next=22;break}return t.abrupt("return",{fail:"The CIDs returned by the function ".concat(Ne.stringify(l)," did not match the the expected CIDs ").concat(Ne.stringify(c),".")});case 22:t.next=27;break;case 24:return t.prev=24,t.t0=t["catch"](7),t.abrupt("return",{fail:"Your function threw an error: ".concat(t.t0,".")});case 27:return t.abrupt("return",{success:"Great job! You've completed this series of lessons!"});case 28:case"end":return t.stop()}},t,this,[[7,24]])}));return function(e,n){return t.apply(this,arguments)}}(),wa={cids:n("c449")},ya={components:{Lesson:Wt},data:function(){return{code:va,text:ha.a,validate:ma,modules:wa,exercise:fa.a}}},ka=ya,xa=Object(l["a"])(ka,la,ua,!1,null,null,null);xa.options.__file="07.vue";var Ca=xa.exports,_a=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-01"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,lessonTitle:"Data structures"}})],1)},Sa=[],Pa=n("78d1"),Ia=n.n(Pa),Ta={components:{Lesson:Wt},data:function(){return{text:Ia.a}}},La=Ta,Da=Object(l["a"])(La,_a,Sa,!1,null,null,null);Da.options.__file="01.vue";var Ea=Da.exports,Aa=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-02"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,lessonTitle:"Location addressing and the centralized web"}})],1)},ja=[],za=n("0856"),Oa=n.n(za),$a={components:{Lesson:Wt},data:function(){return{text:Oa.a}}},Fa=$a,Ba=Object(l["a"])(Fa,Aa,ja,!1,null,null,null);Ba.options.__file="02.vue";var Na=Ba.exports,qa=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-03"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,lessonTitle:"Content addressing with cryptographic hashes"}})],1)},Ra=[],Wa=n("4bad"),Ga=n.n(Wa),Ma={components:{Lesson:Wt},data:function(){return{text:Ga.a}}},Ua=Ma,Ha=Object(l["a"])(Ua,qa,Ra,!1,null,null,null);Ha.options.__file="03.vue";var Ya=Ha.exports,Ja=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-04"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,lessonTitle:"Content Identifiers (CIDs)"}})],1)},Ka=[],Va=n("2223"),Qa=n.n(Va),Za={components:{Lesson:Wt},data:function(){return{text:Qa.a}}},Xa=Za,to=Object(l["a"])(Xa,Ja,Ka,!1,null,null,null);to.options.__file="04.vue";var eo=to.exports,no=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"lesson-05"},[n("Lesson",{attrs:{text:t.text,code:t.code,validate:t.validate,lessonTitle:"Merkle trees and Directed Acyclic Graphs (DAG)"}})],1)},ao=[],oo=n("3e61"),so=n.n(oo),ro={components:{Lesson:Wt},data:function(){return{text:so.a}}},io=ro,co=Object(l["a"])(io,no,ao,!1,null,null,null);co.options.__file="05.vue";var lo=co.exports;a["a"].use(o["a"]);var uo=[{path:"/",component:L,name:"Home"},{path:"/tutorials",component:ht,name:"Tutorials"},{path:"/chapters",component:$,name:"Chapters"},{path:"/host",component:W,name:"Host"},{path:"/build",component:J,name:"Build"},{path:"/contribute",component:tt,name:"Contribute"},{path:"/data-structures/01",component:Ea},{path:"/data-structures/02",component:Na},{path:"/data-structures/03",component:Ya},{path:"/data-structures/04",component:eo},{path:"/data-structures/05",component:lo},{path:"/basics/01",component:te},{path:"/basics/02",component:be},{path:"/basics/03",component:Le},{path:"/blog/01",component:Ye},{path:"/blog/02",component:rn},{path:"/blog/03",component:kn},{path:"/blog/04",component:On},{path:"/blog/05",component:Kn},{path:"/blog/06",component:ca},{path:"/blog/07",component:Ca},{path:"*",name:"404"}],ho=new o["a"]({routes:uo,scrollBehavior:function(t,e){return{x:0,y:0}}});a["a"].config.productionTip=!1,new a["a"]({router:ho,render:function(t){return t(d)}}).$mount("#app")},6:function(t,e){},"64a9":function(t,e,n){},"67ff":function(t,e){t.exports="In this tutorial we'll be exploring the IPFS DAG API, which lets us store data\nobjects in IPFS. (You can store more exciting things in IPFS, like your favorite\ncat GIF, but you'd need to use a different API for that.)\n\nYou can create a new node by passing a data object into the `ipfs.dag.put` method,\nwhich returns a Content Identifier (CID) for the newly created node.\n\n```javascript\nipfs.dag.put({hello: 'world'})\n```\n\nA CID is an address for a block of data in IPFS that is derived from its content. Every\ntime someone puts the same `{hello: 'world'}` data into IPFS, they'll get back an\nidentical CID to the one you got. If they put in `{hell0: 'w0rld'}` instead, the\nCID will be different.\n\n_Note: Throughout our lessons we'll be using a code editor like the one below.\nEnter your solution code within the `run` function that's pre-populated for you,\nbeing sure to return the requested value within that function. (You won't need to\nupdate the `return run` line at the end; that's just there to make the code editor work.)_\n"},"6a07":function(t,e,n){"use strict";var a=n("3f6e"),o=n.n(a);o.a},7:function(t,e){},"78d1":function(t,e){t.exports="## Welcome to ProtoSchool!\n\nBefore diving into code challenges, let's take a minute to look at a few of the\nconcepts that underly the decentralized web. Unlike our other tutorials, this one is\ncode-free and designed especially to introduce you to some of the key terms you'll\nencounter throughout ProtoSchool.\n\nLet's get started!\n\n\n## Data structures\n\nWhether you're a programmer or not, you're surrounded by data structures every day. Lists, dictionaries, and catalogs all help us organize information and take into account the relationships between various pieces of data.\n\nFrom [Wikipedia](https://en.wikipedia.org/wiki/Data_structure):\n\n> In computer science, a data structure is a data organization, management and storage format that enables efficient access and modification. More precisely, a data structure is a collection of data values, the relationships among them, and the functions or operations that can be applied to the data.\n\nIn programming, data structures are everywhere. The way you organize data into variables in order to use them in programs involves any from dozens to millions of data structures. If you're a developer, you're probably familiar with common data structures like arrays, objects, graphs, etc.\n\n## Decentralized data structures\n\nOn the decentralized web, where we access data directly from our peers rather than\nfrom a central authority, we need specialized data structures that allow us to verify\nand link between various pieces of content.\n\nData structures that are using decentralized systems need to be **verifiable**. On a single\nsystem you have a much greater degree of trust in the data structures you work with in memory\nor on disc. But in a decentralized system you have less, or possibly zero, trust among peers.\n\nAlso, large data structures need to be able to be spread out among peers and **linked together**\nin order to be decentralized. In the same way that any web page can link to another web page\nin a different location, decentralized data structures enable a web of interlinked data.\n"},"7d14":function(t,e){t.exports="Add a new field called `tags` whose value is an array of tags. Use the tags `outdoor` and `hobby` for the blog post about trees. The blog post about computers has only a single tag called `hobby`.\n"},8:function(t,e){},"81d9":function(t,e){t.exports="First, you'll need to add a link to the new blog from the node for the `hobby` tag.\n\nWe don't yet have a node for the `funny` tag. Create a new tag node that matches the format of the others and links to the blog post about dogs.\n\nReturn the CIDs of all three tag nodes as an array.\n"},8439:function(t,e,n){"use strict";var a=n("8881"),o=n.n(a);o.a},8636:function(t,e,n){"use strict";var a=n("fecb"),o=n.n(a);o.a},8881:function(t,e,n){},9:function(t,e){},"979c":function(t,e){t.exports='One important feature of Directed Acyclic Graphs (DAGs) is the ability to link them together.\n\nThe way you express links in the `ipfs` DAG store is with the `CID` of\nanother node.\n\nFor example, if we wanted one node to have a link called "foo" pointed\nto another CID instance previously saved as `barCid`, it might look like:\n\n```javascript\n{\n  foo: barCid\n}\n```\nWhen we give a field a name and make its value a link to a CID, we call this a named link.  \n'},9952:function(t,e,n){"use strict";var a=n("c878"),o=n.n(a);o.a},"9bda":function(t,e,n){t.exports=n.p+"img/ipfs.e7599486.svg"},"9bda1":function(t,e){t.exports="**CID** - Content Identifier. An unique address for a block of data in IPFS that is derived from its content.\n\n**DAG** - Directed Acyclic Graph. Blocks in IPFS form a graph as they can point to other blocks by their CID. These links can only point one direction (directed) and across the whole graph there are no loops or cycles (acyclic).\n"},"9ee1":function(t,e){t.exports="A single object can have many links to other nodes. To illustrate this, let's create new nodes which could be used for a tag cloud.\n\nUntil now, we've been using named links, meaning that we create a named field with a single link as its value, such as:\n\n```javascript\n{\n  author: samCid\n}\n```\nHowever, we can also choose to gather links into an array without naming each one individually.\n\n```javascript\n{ links: [\n    natCid,\n    samCid\n  ]\n}\n```\n\nThis is perfect for our use case, where a single tag should be associated with many posts, like so:\n\n```javascript\n{\n  tag: \"name-of-the-tag\",\n  posts: [\n    // links to the CIDs\n  ]\n}\n```\n\nPlease note that arrays are order-dependent. This means that two arrays with the same links in a different order will get different CIDs.\n"},a10e:function(t,e){t.exports="In the [Basics tutorial](#/basics/02), we learned that a link in IPFS is represented as an instance of `CID`:\n\n```javascript\n{\n  linkToAwesomeNode: awesomeCid\n}\n```\nWhen we give a field a name and make its value a link to a CID, we call this a named link.\n\nThe exercise below has some prepared code to get us started. The data structure resembles a blog which has two authors, Nat and Sam, and some blog posts about trees and computers. At the moment there’s no relation between them. Let’s update the blog posts so that they link to the author.\n"},a28b:function(t,e){t.exports="Fill in the body of the `traversePosts()` function. It takes the CID object of the most recent blog post as input. Use that to get the object from IPFS and follow the `prev` links. The return value of the function should be an array with the CID objects of all nodes (including the input CID).\n"},acc3:function(t,e,n){t.exports=n.p+"img/not-started.2b6ab90a.svg"},aef2:function(t,e,n){},b486:function(t,e,n){"use strict";var a=n("c51b"),o=n.n(a);o.a},ba50:function(t,e,n){},c355:function(t,e){t.exports="Create a named link called `bar` that points to the node we created in the first the lesson. Put it into IPFS and return its CID.\n\nThe editor is pre-populated with the code to create the node we're linking to.\n"},c3aa:function(t,e,n){},c51b:function(t,e,n){},c5bb:function(t,e){t.exports="Use `ipfs.dag.put` to create a node for the data `{test: 1}`. Return the CID of your new node.\n"},c878:function(t,e,n){},cab1:function(t,e){t.exports="Use `ipfs.dag.get` to return the value of `test` by traversing the link from the object you `put` in the previous exercise."},d0c2:function(t,e,n){t.exports=n.p+"img/in-progress.774a81c8.svg"},d21f:function(t,e,n){"use strict";var a=n("aef2"),o=n.n(a);o.a},d39a:function(t,e){t.exports="You want to create an overview page that lists your blog posts chronologically.\n\nYou *could* do it the same way as we did with tags. However, you would need to update that page (create a new node) every time you added a new blog post. It sounds wasteful to create a new node with every small change.\n\nThere’s a better way! Whenever you create a new blog post, you can link to the previous one directly. This enables you to walk those links to create the chronological overview page dynamically, as we'll see in the next lesson.\n\nWe know the CID of a blog post as soon as it is stored in IPFS. We can use that CID to link from newer blog posts to older ones.\n"},d4a8:function(t,e,n){"use strict";var a=n("ba50"),o=n.n(a);o.a},d4ea:function(t,e){t.exports="You can read data from deeply nested objects using path queries.\n\n```javascript\nlet cid = await ipfs.dag.put({\n  my: {\n    deep: {\n      obj: 'is cool'\n    }\n  }\n})\n\nconsole.log(await ipfs.dag.get(cid, '/my/deep/obj'))\n/* prints {value: 'is cool', remainderPath: ''} */\n```\n\n`ipfs.dag.get` allows queries using IPFS paths.\nThese queries return an object containing the value of the query and any remaining path that was unresolved.\n\nThe cool thing about this API is that it can also traverse through links.\n\n```javascript\nlet cid = await ipfs.dag.put({foo: 'bar'})\nlet cid2 = await ipfs.dag.put({\n  my: {\n    other: cid\n  }\n})\n\nconsole.log(await ipfs.dag.get(cid2, '/my/other/foo'))\n/* prints {value: 'bar', remainderPath: ''} */\n```\n"},d56b:function(t,e){t.exports="Create a new blog post which is authored by Sam, has content about `dogs`, and is tagged as `funny` and `hobby`. Return the CID of that new blog post.\n"},df39:function(t,e){t.exports="Everything that is stored in IPFS has an associated CID. That CID is constructed by hashing the data itself. If the same hash and encoding is used, then the same data will result in the same CID. However, as soon as you edit data and store it again, it will have a new CID. The old data won’t be overridden; it’s still stored there with its old CID.\n\nOur blog doesn't have any tags yet. Let’s modify the posts again to add some tags, watching how the CID for each post changes as we change its contents.\n\nBefore modifying the code, please open the developer tools in your browser and submit the code in its current state. You’ll see the CIDs of the blog posts in the console. When you look at the console again after you’ve modified the code, you’ll see that the CIDs have changed. (Notice how we use `CID.toBaseEncodedString()` to access the CID as a string for purposes of console logging.)\n"},e522:function(t,e){t.exports="In the code below, introduce a new field named `prev` in our blog posts. This field links to the previous blog post.\n\nLink the blog posts in chronological order. The oldest one is the one about trees, then there’s the one about computers. The one about `dogs` is the latest one. Once you’ve updated them, return the CID of the blog post about `dogs`.\n"},e776:function(t,e){t.exports="With every blog post linked together, we can return all of them by referencing only the CID of the last. This kind of traversal could be used to create an overview page that lists all blog posts chronologically.\n\nThe `prev` field contains a link to the previous blog post. You can use that CID and the `ipfs.dag.get()` API to get the previous blog, and then use _its_ `prev` field to get the one before that. A perfect use case for a while loop!\n\nNote that the `ipfs.dag.get()` API returns an object with a `value` attribute which is the node you want and contains the original fields you saved. For example, we could find the author of the post about dogs like so:\n\n```javascript\nlet dogPostAuthor = (await ipfs.dag.get(dogPostCid)).value.author\n```\n\nNotice the parentheses used around `await ipfs.dag.get(dogPostCid)` above, since the async function needs to complete before the CID object with a property of `value` will be available. When you're using this code in practice, it's important not to make too many async calls that will create lag time.\n"},f211:function(t,e){t.exports="In order to make the DAG (Directed Acyclic Graph) a bit more interesting, we will add a new blog post. It follows the same structure as the existing ones.\n"},fecb:function(t,e,n){}});
//# sourceMappingURL=app.e55b70d7.js.map